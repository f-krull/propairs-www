/*!

JSZip - A Javascript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2014 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/master/LICENSE
*/
!function(a){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=a();else if("function"==typeof define&&define.amd)define([],a);else{var b;b="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,b.JSZip=a()}}(function(){var a;return function b(a,c,d){function e(g,h){if(!c[g]){if(!a[g]){var i="function"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);var j=new Error("Cannot find module '"+g+"'");throw j.code="MODULE_NOT_FOUND",j}var k=c[g]={exports:{}};a[g][0].call(k.exports,function(b){var c=a[g][1][b];return e(c?c:b)},k,k.exports,b,a,c,d)}return c[g].exports}for(var f="function"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b,c){"use strict";var d=a("./utils"),e=a("./support"),f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
// public method for encoding
c.encode=function(a){for(var b,c,e,g,h,i,j,k=[],l=0,m=a.length,n=m,o="string"!==d.getTypeOf(a);l<a.length;)n=m-l,o?(b=a[l++],c=m>l?a[l++]:0,e=m>l?a[l++]:0):(b=a.charCodeAt(l++),c=m>l?a.charCodeAt(l++):0,e=m>l?a.charCodeAt(l++):0),g=b>>2,h=(3&b)<<4|c>>4,i=n>1?(15&c)<<2|e>>6:64,j=n>2?63&e:64,k.push(f.charAt(g)+f.charAt(h)+f.charAt(i)+f.charAt(j));return k.join("")},
// public method for decoding
c.decode=function(a){var b,c,d,g,h,i,j,k=0,l=0;a=a.replace(/[^A-Za-z0-9\+\/\=]/g,"");var m=3*a.length/4;a.charAt(a.length-1)===f.charAt(64)&&m--,a.charAt(a.length-2)===f.charAt(64)&&m--;var n;for(n=e.uint8array?new Uint8Array(m):new Array(m);k<a.length;)g=f.indexOf(a.charAt(k++)),h=f.indexOf(a.charAt(k++)),i=f.indexOf(a.charAt(k++)),j=f.indexOf(a.charAt(k++)),b=g<<2|h>>4,c=(15&h)<<4|i>>2,d=(3&i)<<6|j,n[l++]=b,64!=i&&(n[l++]=c),64!=j&&(n[l++]=d);return n}},{"./support":27,"./utils":29}],2:[function(a,b,c){"use strict";/**
 * Represent a compressed object, with everything needed to decompress it.
 * @constructor
 * @param {number} compressedSize the size of the data compressed.
 * @param {number} uncompressedSize the size of the data after decompression.
 * @param {number} crc32 the crc32 of the decompressed file.
 * @param {object} compression the type of compression, see lib/compressions.js.
 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the compressed data.
 */
function d(a,b,c,d,e){this.compressedSize=a,this.uncompressedSize=b,this.crc32=c,this.compression=d,this.compressedContent=e}var e=a("./stream/DataWorker"),f=a("./stream/DataLengthProbe"),g=a("./stream/Crc32Probe"),f=a("./stream/DataLengthProbe");d.prototype={/**
     * Create a worker to get the uncompressed content.
     * @return {GenericWorker} the worker.
     */
getContentWorker:function(){var a=new e(this.compressedContent).pipe(this.compression.uncompressWorker()).pipe(new f("data_length")),b=this;return a.on("end",function(){if(this.streamInfo.data_length!=b.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),a},/**
     * Create a worker to get the compressed content.
     * @return {GenericWorker} the worker.
     */
getCompressedWorker:function(){return new e(this.compressedContent).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},/**
 * Chain the given worker with other workers to compress the content with the
 * given compresion.
 * @param {GenericWorker} uncompressedWorker the worker to pipe.
 * @param {Object} compression the compression object.
 * @param {Object} compressionOptions the options to use when compressing.
 * @return {GenericWorker} the new worker compressing the content.
 */
d.createWorkerFrom=function(a,b,c){return a.pipe(new g).pipe(new f("uncompressedSize")).pipe(b.compressWorker(c)).pipe(new f("compressedSize")).withStreamInfo("compression",b)},b.exports=d},{"./stream/Crc32Probe":22,"./stream/DataLengthProbe":23,"./stream/DataWorker":24}],3:[function(a,b,c){"use strict";var d=a("./stream/GenericWorker");c.STORE={magic:"\x00\x00",compressWorker:function(a){return new d("STORE compression")},uncompressWorker:function(){return new d("STORE decompression")}},c.DEFLATE=a("./flate")},{"./flate":8,"./stream/GenericWorker":25}],4:[function(a,b,c){"use strict";/**
 * The following functions come from pako, from pako/lib/zlib/crc32.js
 * released under the MIT license, see pako https://github.com/nodeca/pako/
 */
// Use ordinary array, since untyped makes no boost here
function d(){for(var a,b=[],c=0;256>c;c++){a=c;for(var d=0;8>d;d++)a=1&a?3988292384^a>>>1:a>>>1;b[c]=a}return b}function e(a,b,c,d){var e=h,f=d+c;a=-1^a;for(var g=d;f>g;g++)a=a>>>8^e[255&(a^b[g])];return-1^a}
// That's all for the pako functions.
/**
 * Compute the crc32 of a string.
 * This is almost the same as the function crc32, but for strings. Using the
 * same function for the two use cases leads to horrible performances.
 * @param {Number} crc the starting value of the crc.
 * @param {String} str the string to use.
 * @param {Number} len the length of the string.
 * @param {Number} pos the starting position for the crc32 computation.
 * @return {Number} the computed crc32.
 */
function f(a,b,c,d){var e=h,f=d+c;a=-1^a;for(var g=d;f>g;g++)a=a>>>8^e[255&(a^b.charCodeAt(g))];return-1^a}var g=a("./utils"),h=d();b.exports=function(a,b){if("undefined"==typeof a||!a.length)return 0;var c="string"!==g.getTypeOf(a);return c?e(0|b,a,a.length,0):f(0|b,a,a.length,0)}},{"./utils":29}],5:[function(a,b,c){"use strict";c.base64=!1,c.binary=!1,c.dir=!1,c.createFolders=!1,c.date=null,c.compression=null,c.compressionOptions=null,c.comment=null,c.unixPermissions=null,c.dosPermissions=null},{}],6:[function(a,b,c){"use strict";var d=a("./utils");/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
c.string2binary=function(a){return d.string2binary(a)},/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
c.string2Uint8Array=function(a){return d.transformTo("uint8array",a)},/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
c.uint8Array2String=function(a){return d.transformTo("string",a)},/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
c.string2Blob=function(a){var b=d.transformTo("arraybuffer",a);return d.newBlob(b,"application/zip")},/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
c.arrayBuffer2Blob=function(a){return d.newBlob(a,"application/zip")},/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
c.transformTo=function(a,b){return d.transformTo(a,b)},/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
c.getTypeOf=function(a){return d.getTypeOf(a)},/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
c.checkSupport=function(a){return d.checkSupport(a)},/**
 * @deprecated
 * This value will be removed in a future version without replacement.
 */
c.MAX_VALUE_16BITS=d.MAX_VALUE_16BITS,/**
 * @deprecated
 * This value will be removed in a future version without replacement.
 */
c.MAX_VALUE_32BITS=d.MAX_VALUE_32BITS,/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
c.pretty=function(a){return d.pretty(a)},/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
c.findCompression=function(a){return d.findCompression(a)},/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
c.isRegExp=function(a){return d.isRegExp(a)}},{"./utils":29}],7:[function(a,b,c){"use strict";var d=a("es6-promise").Promise;/**
 * Let the user use/change some implementations.
 */
b.exports={Promise:d}},{"es6-promise":35}],8:[function(a,b,c){"use strict";/**
 * Create a worker that uses pako to inflate/deflate.
 * @constructor
 * @param {String} action the name of the pako function to call : either "Deflate" or "Inflate".
 * @param {Object} options the options to use when (de)compressing.
 */
function d(a,b){h.call(this,"FlateWorker/"+a),this._pako=new f[a]({raw:!0,level:b.level||-1}),
// the `meta` object from the last chunk received
// this allow this worker to pass around metadata
this.meta={};var c=this;this._pako.onData=function(a){c.push({data:a,meta:c.meta})}}var e="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,f=a("pako"),g=a("./utils"),h=a("./stream/GenericWorker"),i=e?"uint8array":"array";c.magic="\b\x00",g.inherits(d,h),/**
 * @see GenericWorker.processChunk
 */
d.prototype.processChunk=function(a){this.meta=a.meta,this._pako.push(g.transformTo(i,a.data),!1)},/**
 * @see GenericWorker.flush
 */
d.prototype.flush=function(){h.prototype.flush.call(this),this._pako.push([],!0)},/**
 * @see GenericWorker.cleanUp
 */
d.prototype.cleanUp=function(){h.prototype.cleanUp.call(this),this._pako=null},c.compressWorker=function(a){return new d("Deflate",a)},c.uncompressWorker=function(){return new d("Inflate",{})}},{"./stream/GenericWorker":25,"./utils":29,pako:38}],9:[function(a,b,c){"use strict";/**
 * A worker to concatenate other workers to create a zip file.
 * @param {Boolean} streamFiles `true` to stream the content of the files,
 * `false` to accumulate it.
 * @param {String} comment the comment to use.
 */
function d(a,b,c){f.call(this,"ZipFileWorker"),
// The number of bytes written so far. This doesn't count accumulated chunks.
this.bytesWritten=0,
// The comment of the zip file
this.zipComment=b,
// The platform "generating" the zip file.
this.zipPlatform=c,
// Should we stream the content of the files ?
this.streamFiles=a,
// If `streamFiles` is false, we will need to accumulate the content of the
// files to calculate sizes / crc32 (and write them *before* the content).
// This boolean indicates if we are accumulating chunks (it will change a lot
// during the lifetime of this worker).
this.accumulate=!1,
// The buffer receiving chunks when accumulating content.
this.contentBuffer=[],
// The list of generated directory records.
this.dirRecords=[],
// The offset (in bytes) from the beginning of the zip file for the current source.
this.currentSourceOffset=0,
// The total number of entries in this zip file.
this.entriesCount=0,
// the name of the file currently being added, null when handling the end of the zip file.
// Used for the emited metadata.
this.currentFile=null,this._sources=[]}var e=a("../utils"),f=a("../stream/GenericWorker"),g=a("../utf8"),h=a("../crc32"),i=a("../signature"),j=function(a,b){var c,d="";for(c=0;b>c;c++)d+=String.fromCharCode(255&a),a>>>=8;return d},k=function(a,b){var c=a;
// I can't use octal values in strict mode, hence the hexa.
//  040775 => 0x41fd
// 0100664 => 0x81b4
return a||(c=b?16893:33204),(65535&c)<<16},l=function(a,b){
// the dir flag is already set for compatibility
return 63&(a||0)},m=function(a,b,c,d,f){var m,n,o=a.file,p=a.compression,q=e.transformTo("string",g.utf8encode(o.name)),r=o.comment,s=e.transformTo("string",g.utf8encode(r)),t=q.length!==o.name.length,u=s.length!==r.length,v="",w="",x="",y=o.dir,z=o.date,A={crc32:0,compressedSize:0,uncompressedSize:0};
// if the content is streamed, the sizes/crc32 are only available AFTER
// the end of the stream.
b&&!c||(A.crc32=a.crc32,A.compressedSize=a.compressedSize,A.uncompressedSize=a.uncompressedSize);var B=0;b&&(B|=8),(t||u)&&(B|=2048);var C=0,D=0;y&&(
// dos or unix, we set the dos dir flag
C|=16),"UNIX"===f?(D=798,C|=k(o.unixPermissions,y)):(D=20,C|=l(o.dosPermissions,y)),m=z.getHours(),m<<=6,m|=z.getMinutes(),m<<=5,m|=z.getSeconds()/2,n=z.getFullYear()-1980,n<<=4,n|=z.getMonth()+1,n<<=5,n|=z.getDate(),t&&(w=j(1,1)+j(h(q),4)+q,v+="up"+j(w.length,2)+w),u&&(x=j(1,1)+j(h(s),4)+s,v+="uc"+j(x.length,2)+x);var E="";E+="\n\x00",E+=j(B,2),E+=p.magic,E+=j(m,2),E+=j(n,2),E+=j(A.crc32,4),E+=j(A.compressedSize,4),E+=j(A.uncompressedSize,4),E+=j(q.length,2),E+=j(v.length,2);var F=i.LOCAL_FILE_HEADER+E+q+v,G=i.CENTRAL_FILE_HEADER+
// version made by (00: DOS)
j(D,2)+
// file header (common to file and central directory)
E+
// file comment length
j(s.length,2)+
// disk number start
"\x00\x00\x00\x00"+
// external file attributes
j(C,4)+
// relative offset of local header
j(d,4)+
// file name
q+
// extra field
v+
// file comment
s;return{fileRecord:F,dirRecord:G}},n=function(a,b,c,d){var f="",h=e.transformTo("string",g.utf8encode(d));
// end of central dir signature
// number of this disk
// total number of entries in the central directory on this disk
// total number of entries in the central directory
// size of the central directory   4 bytes
// offset of start of central directory with respect to the starting disk number
// .ZIP file comment length
// .ZIP file comment
return f=i.CENTRAL_DIRECTORY_END+"\x00\x00\x00\x00"+j(a,2)+j(a,2)+j(b,4)+j(c,4)+j(h.length,2)+h},o=function(a){var b="";
// crc-32                          4 bytes
// compressed size                 4 bytes
// uncompressed size               4 bytes
return b=i.DATA_DESCRIPTOR+j(a.crc32,4)+j(a.compressedSize,4)+j(a.uncompressedSize,4)};e.inherits(d,f),/**
 * @see GenericWorker.push
 */
d.prototype.push=function(a){var b=a.meta.percent||0,c=this.entriesCount,d=this._sources.length;this.accumulate?this.contentBuffer.push(a):(this.bytesWritten+=a.data.length,f.prototype.push.call(this,{data:a.data,meta:{currentFile:this.currentFile,percent:c?(b+100*(c-d-1))/c:100}}))},/**
 * The worker started a new source (an other worker).
 * @param {Object} streamInfo the streamInfo object from the new source.
 */
d.prototype.openedSource=function(a){
// don't stream folders (because they don't have any content)
if(this.currentSourceOffset=this.bytesWritten,this.currentFile=a.file.name,this.streamFiles&&!a.file.dir){var b=m(a,this.streamFiles,!1,this.currentSourceOffset,this.zipPlatform);this.push({data:b.fileRecord,meta:{percent:0}})}else
// we need to wait for the whole file before pushing anything
this.accumulate=!0},/**
 * The worker finished a source (an other worker).
 * @param {Object} streamInfo the streamInfo object from the finished source.
 */
d.prototype.closedSource=function(a){this.accumulate=!1;var b=m(a,this.streamFiles,!0,this.currentSourceOffset,this.zipPlatform);if(this.dirRecords.push(b.dirRecord),this.streamFiles&&!a.file.dir)
// after the streamed file, we put data descriptors
this.push({data:o(a),meta:{percent:100}});else for(
// the content wasn't streamed, we need to push everything now
// first the file record, then the content
this.push({data:b.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},/**
 * @see GenericWorker.flush
 */
d.prototype.flush=function(){for(var a=this.bytesWritten,b=0;b<this.dirRecords.length;b++)this.push({data:this.dirRecords[b],meta:{percent:100}});var c=this.bytesWritten-a,d=n(this.dirRecords.length,c,a,this.zipComment);this.push({data:d,meta:{percent:100}})},/**
 * Prepare the next source to be read.
 */
d.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},/**
 * @see GenericWorker.registerPrevious
 */
d.prototype.registerPrevious=function(a){this._sources.push(a);var b=this;return a.on("data",function(a){b.processChunk(a)}),a.on("end",function(){b.closedSource(b.previous.streamInfo),b._sources.length?b.prepareNextSource():b.end()}),a.on("error",function(a){b.error(a)}),this},/**
 * @see GenericWorker.resume
 */
d.prototype.resume=function(){return f.prototype.resume.call(this)?!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0):!1},/**
 * @see GenericWorker.error
 */
d.prototype.error=function(a){var b=this._sources;if(!f.prototype.error.call(this,a))return!1;for(var c=0;c<b.length;c++)try{b[c].error(a)}catch(a){}return!0},b.exports=d},{"../crc32":4,"../signature":20,"../stream/GenericWorker":25,"../utf8":28,"../utils":29}],10:[function(a,b,c){"use strict";var d=a("../compressions"),e=a("./ZipFileWorker"),f=function(a,b){var c=a||b,e=d[c];if(!e)throw new Error(c+" is not a valid compression method !");return e};/**
 * Create a worker to generate a zip file.
 * @param {Object} files the hash containing the ZipObjects.
 * @param {Object} options to generate the zip file.
 * @param {String} comment the comment to use.
 */
c.generateWorker=function(a,b,c){var d=new e(b.streamFiles,c,b.platform),g=0;try{for(var h in a)if(a.hasOwnProperty(h)){g++;var i,j,k=a[h],l=f(k.options.compression,b.compression),m=k.options.compressionOptions||b.compressionOptions||{};
// handle the deprecated options.dir
i=k._initialMetadata.dir!==k.dir?k.dir:k.options.dir,
// handle the deprecated options.date
j=k._initialMetadata.date!==k.date?k.date:k.options.date,k._compressWorker(l,m).withStreamInfo("file",{name:k.name,dir:i,date:j,comment:k.comment||"",unixPermissions:k.unixPermissions,dosPermissions:k.dosPermissions}).pipe(d)}d.entriesCount=g}catch(n){d.error(n)}return d}},{"../compressions":3,"./ZipFileWorker":9}],11:[function(a,b,c){"use strict";/**
 * Representation a of zip file in js
 * @constructor
 */
function d(){
// if this constructor is used without `new`, it adds `new` before itself:
if(!(this instanceof d))return new d;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");
// object containing the files :
// {
//   "folder/" : {...},
//   "folder/data.txt" : {...}
// }
this.files={},this.comment=null,
// Where we are in the hierarchy
this.root="",this.clone=function(){var a=new d;for(var b in this)"function"!=typeof this[b]&&(a[b]=this[b]);return a}}var e=a("./base64"),f=a("./utils");d.prototype=a("./object"),d.prototype.loadAsync=a("./load"),d.support=a("./support"),d.defaults=a("./defaults"),d.loadAsync=function(a,b){return(new d).loadAsync(a,b)},/**
 * @deprecated
 * This namespace will be removed in a future version without replacement.
 */
d.utils=a("./deprecatedPublicUtils"),d.base64={/**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
encode:function(a){return e.encode(a)},/**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
decode:function(a){return f.transformTo("string",e.decode(a))}},d.compressions=a("./compressions"),d.external=a("./external"),b.exports=d},{"./base64":1,"./compressions":3,"./defaults":5,"./deprecatedPublicUtils":6,"./external":7,"./load":12,"./object":14,"./support":27,"./utils":29}],12:[function(a,b,c){"use strict";/**
 * Check the CRC32 of an entry.
 * @param {ZipEntry} zipEntry the zip entry to check.
 * @return {Promise} the result.
 */
function d(a){return new f(function(b,c){var d=a.decompressed.getContentWorker().pipe(new h);d.on("error",function(a){c(a)}).on("end",function(){d.streamInfo.crc32!==a.decompressed.crc32?c(new Error("Corrupted zip : CRC32 mismatch")):b()}).resume()})}var e=a("./base64"),f=(a("./utils"),a("./external").Promise),g=a("./zipEntries"),h=a("./stream/Crc32Probe");a("./stream/StreamHelper");b.exports=function(a,b){var c=this;return b=b||{},new f(function(c,d){b.base64&&(a=e.decode(a));var f=new g(b);f.load(a),c(f)}).then(function(a){var c=[f.resolve(a)],e=a.files;if(b.checkCRC32)for(var g=0;g<e.length;g++)c.push(d(e[g]));return f.all(c)}).then(function(a){for(var d=a.shift(),e=d.files,f=0;f<e.length;f++){var g=e[f];c.file(g.fileNameStr,g.decompressed,{binary:!0,optimizedBinaryString:!0,date:g.date,dir:g.dir,comment:g.fileCommentStr.length?g.fileCommentStr:null,unixPermissions:g.unixPermissions,dosPermissions:g.dosPermissions,createFolders:b.createFolders})}return d.zipComment.length&&(c.comment=d.zipComment),c})}},{"./base64":1,"./external":7,"./stream/Crc32Probe":22,"./stream/StreamHelper":26,"./utils":29,"./zipEntries":30}],13:[function(a,b,c){(function(a){"use strict";b.exports={/**
     * True if this is running in Nodejs, will be undefined in a browser.
     * In a browser, browserify won't include this file and the whole module
     * will be resolved an empty object.
     */
isNode:"undefined"!=typeof a,/**
     * Create a new nodejs Buffer.
     * @param {Object} data the data to pass to the constructor.
     * @param {String} encoding the encoding to use.
     * @return {Buffer} a new Buffer.
     */
newBuffer:function(b,c){return new a(b,c)},/**
     * Find out if an object is a Buffer.
     * @param {Object} b the object to test.
     * @return {Boolean} true if the object is a Buffer, false otherwise.
     */
isBuffer:function(b){return a.isBuffer(b)},isStream:function(a){return a&&"function"==typeof a.on&&"function"==typeof a.pause&&"function"==typeof a.resume}}}).call(this,"undefined"!=typeof Buffer?Buffer:void 0)},{}],14:[function(a,b,c){"use strict";var d=a("./utils"),e=a("./stream/GenericWorker"),f=a("./stream/StreamHelper"),g=a("./crc32"),h=a("./base64"),i=a("./defaults"),j=a("./compressedObject"),k=a("./utf8"),l=a("./zipObject"),m=a("./generate"),n=a("./nodejsUtils"),o=a("./nodejs/NodejsStreamInputAdapter"),p=function(){var a,b,c={};for(a=0;a<arguments.length;a++)// arguments is not enumerable in some browsers
for(b in arguments[a])arguments[a].hasOwnProperty(b)&&"undefined"==typeof c[b]&&(c[b]=arguments[a][b]);return c},q=function(a){return a=a||{},a.base64!==!0||null!==a.binary&&void 0!==a.binary||(a.binary=!0),a=p(a,i),a.date=a.date||new Date,null!==a.compression&&(a.compression=a.compression.toUpperCase()),a},r=function(a,b,c){
// be sure sub folders exist
var f,g=d.getTypeOf(b);c=q(c),"string"==typeof c.unixPermissions&&(c.unixPermissions=parseInt(c.unixPermissions,8)),c.unixPermissions&&16384&c.unixPermissions&&(c.dir=!0),c.dosPermissions&&16&c.dosPermissions&&(c.dir=!0),c.dir&&(a=t(a)),"arraybuffer"===g&&(b=d.transformTo("uint8array",b)),n.isNode&&n.isStream(b)&&(b=new o(b)),c.createFolders&&(f=s(a))&&u.call(this,f,!0);var i=b instanceof j&&0===b.uncompressedSize;if(i||c.dir||!b||0===b.length)c.base64=!1,c.binary=!0,b=null,c.compression="STORE",g=null;else{if(!(g||b instanceof j||b instanceof e))throw new Error("The data of '"+a+"' is in an unsupported format !");"string"===g?c.base64?(b=h.decode(b),c.base64=!1,c.binary=!0):c.binary&&c.optimizedBinaryString!==!0&&(b=d.string2binary(b)):(c.base64=!1,c.binary=!0)}var k=new l(a,b,c);return this.files[a]=k,k},s=function(a){"/"==a.slice(-1)&&(a=a.substring(0,a.length-1));var b=a.lastIndexOf("/");return b>0?a.substring(0,b):""},t=function(a){
// Check the name ends with a /
return"/"!=a.slice(-1)&&(a+="/"),a},u=function(a,b){
// Does this folder already exist?
return b="undefined"!=typeof b?b:!1,a=t(a),this.files[a]||r.call(this,a,null,{dir:!0,createFolders:b}),this.files[a]},v={/**
     * @see loadAsync
     */
load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},/**
     * Filter nested files/folders with the specified function.
     * @param {Function} search the predicate to use :
     * function (relativePath, file) {...}
     * It takes 2 arguments : the relative path and the file.
     * @return {Array} An array of matching elements.
     */
filter:function(a){var b,c,d,e,f=[];for(b in this.files)this.files.hasOwnProperty(b)&&(d=this.files[b],e=new l(d.name,d._data,p(d.options)),c=b.slice(this.root.length,b.length),b.slice(0,this.root.length)===this.root&&a(c,e)&&f.push(e));return f},/**
     * Add a file to the zip file, or search a file.
     * @param   {string|RegExp} name The name of the file to add (if data is defined),
     * the name of the file to find (if no data) or a regex to match files.
     * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded
     * @param   {Object} o     File options
     * @return  {JSZip|Object|Array} this JSZip object (when adding a file),
     * a file (when searching by string) or an array of files (when searching by regex).
     */
file:function(a,b,c){if(1===arguments.length){if(d.isRegExp(a)){var e=a;return this.filter(function(a,b){return!b.dir&&e.test(a)})}// text
var f=this.files[this.root+a];return f&&!f.dir?new l(f.name,f._data,p(f.options)):null}// more than one argument : we have data !
return a=this.root+a,r.call(this,a,b,c),this},/**
     * Add a directory to the zip file, or search.
     * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.
     * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.
     */
folder:function(a){if(!a)return this;if(d.isRegExp(a))return this.filter(function(b,c){return c.dir&&a.test(b)});
// else, name is a new folder
var b=this.root+a,c=u.call(this,b),e=this.clone();return e.root=c.name,e},/**
     * Delete a file, or a directory and all sub-files, from the zip
     * @param {string} name the name of the file to delete
     * @return {JSZip} this JSZip object
     */
remove:function(a){a=this.root+a;var b=this.files[a];if(b||(
// Look for any folders
"/"!=a.slice(-1)&&(a+="/"),b=this.files[a]),b&&!b.dir)
// file
delete this.files[a];else for(var c=this.filter(function(b,c){return c.name.slice(0,a.length)===a}),d=0;d<c.length;d++)delete this.files[c[d].name];return this},/**
     * Generate the complete zip file
     * @param {Object} options the options to generate the zip file :
     * - base64, (deprecated, use type instead) true to generate base64.
     * - compression, "STORE" by default.
     * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
     * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file
     */
generate:function(a){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},/**
     * Generate the complete zip file as an internal stream.
     * @param {Object} options the options to generate the zip file :
     * - base64, (deprecated, use type instead) true to generate base64.
     * - compression, "STORE" by default.
     * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
     * @return {StreamHelper} the streamed zip file.
     */
generateInternalStream:function(a){var b,c={};try{c=p(a||{},{base64:!0,streamFiles:!1,compression:"STORE",compressionOptions:null,type:"base64",platform:"DOS",comment:null,mimeType:"application/zip"}),c.type=c.type.toLowerCase(),c.compression=c.compression.toUpperCase(),
// used the deprecated `base64:false` without changing `type:base64`
"base64"!==c.type||c.base64||(c.type="string"),
// "binarystring" is prefered but the internals use "string".
"binarystring"===c.type&&(c.type="string"),d.checkSupport(c.type),
// accept nodejs `process.platform`
"darwin"!==a.platform&&"freebsd"!==a.platform&&"linux"!==a.platform&&"sunos"!==a.platform||(a.platform="UNIX"),"win32"===a.platform&&(a.platform="DOS");var g=c.comment||this.comment||"";b=m.generateWorker(this.files,c,g)}catch(h){b=new e,b.error(h)}return new f(b,c.type||"string",c.mimeType)},/**
     * Generate the complete zip file asynchronously.
     * @see generateInternalStream
     */
generateAsync:function(a,b){return this.generateInternalStream(a).accumulate(b)},/**
     * Generate the complete zip file asynchronously.
     * @see generateInternalStream
     */
generateNodeStream:function(a,b){return this.generateInternalStream(a).toNodejsStream(b)},/**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
crc32:function(a,b){return g(a,b)},/**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
utf8encode:function(a){return d.transformTo("string",k.utf8encode(a))},/**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
utf8decode:function(a){return k.utf8decode(a)}};b.exports=v},{"./base64":1,"./compressedObject":2,"./crc32":4,"./defaults":5,"./generate":10,"./nodejs/NodejsStreamInputAdapter":36,"./nodejsUtils":13,"./stream/GenericWorker":25,"./stream/StreamHelper":26,"./utf8":28,"./utils":29,"./zipObject":32}],15:[function(a,b,c){"use strict";function d(a){this.data=a,// type : see implementation
this.length=a.length,this.index=0}var e=a("../utils");d.prototype={/**
     * Check that the offset will not go too far.
     * @param {string} offset the additional offset to check.
     * @throws {Error} an Error if the offset is out of bounds.
     */
checkOffset:function(a){this.checkIndex(this.index+a)},/**
     * Check that the specifed index will not be too far.
     * @param {string} newIndex the index to check.
     * @throws {Error} an Error if the index is out of bounds.
     */
checkIndex:function(a){if(this.length<a||0>a)throw new Error("End of data reached (data length = "+this.length+", asked index = "+a+"). Corrupted zip ?")},/**
     * Change the index.
     * @param {number} newIndex The new index.
     * @throws {Error} if the new index is out of the data.
     */
setIndex:function(a){this.checkIndex(a),this.index=a},/**
     * Skip the next n bytes.
     * @param {number} n the number of bytes to skip.
     * @throws {Error} if the new index is out of the data.
     */
skip:function(a){this.setIndex(this.index+a)},/**
     * Get the byte at the specified index.
     * @param {number} i the index to use.
     * @return {number} a byte.
     */
byteAt:function(a){},/**
     * Get the next number with a given byte size.
     * @param {number} size the number of bytes to read.
     * @return {number} the corresponding number.
     */
readInt:function(a){var b,c=0;for(this.checkOffset(a),b=this.index+a-1;b>=this.index;b--)c=(c<<8)+this.byteAt(b);return this.index+=a,c},/**
     * Get the next string with a given byte size.
     * @param {number} size the number of bytes to read.
     * @return {string} the corresponding string.
     */
readString:function(a){return e.transformTo("string",this.readData(a))},/**
     * Get raw data without conversion, <size> bytes.
     * @param {number} size the number of bytes to read.
     * @return {Object} the raw data, implementation specific.
     */
readData:function(a){},/**
     * Find the last occurence of a zip signature (4 bytes).
     * @param {string} sig the signature to find.
     * @return {number} the index of the last occurence, -1 if not found.
     */
lastIndexOfSignature:function(a){},/**
     * Read the signature (4 bytes) at the current position and compare it with sig.
     * @param {string} sig the expected signature
     * @return {boolean} true if the signature matches, false otherwise.
     */
readAndCheckSignature:function(a){},/**
     * Get the next date.
     * @return {Date} the date.
     */
readDate:function(){var a=this.readInt(4);// year
// month
// day
// hour
// minute
return new Date((a>>25&127)+1980,(a>>21&15)-1,a>>16&31,a>>11&31,a>>5&63,(31&a)<<1)}},b.exports=d},{"../utils":29}],16:[function(a,b,c){"use strict";function d(a){e.call(this,a)}var e=a("./Uint8ArrayReader"),f=a("../utils");f.inherits(d,e),/**
 * @see DataReader.readData
 */
d.prototype.readData=function(a){this.checkOffset(a);var b=this.data.slice(this.index,this.index+a);return this.index+=a,b},b.exports=d},{"../utils":29,"./Uint8ArrayReader":18}],17:[function(a,b,c){"use strict";function d(a,b){e.call(this,a),b||(this.data=f.string2binary(this.data))}var e=a("./DataReader"),f=a("../utils");f.inherits(d,e),/**
 * @see DataReader.byteAt
 */
d.prototype.byteAt=function(a){return this.data.charCodeAt(a)},/**
 * @see DataReader.lastIndexOfSignature
 */
d.prototype.lastIndexOfSignature=function(a){return this.data.lastIndexOf(a)},/**
 * @see DataReader.readAndCheckSignature
 */
d.prototype.readAndCheckSignature=function(a){var b=this.readData(4);return a===b},/**
 * @see DataReader.readData
 */
d.prototype.readData=function(a){this.checkOffset(a);
// this will work because the constructor applied the "& 0xff" mask.
var b=this.data.slice(this.index,this.index+a);return this.index+=a,b},b.exports=d},{"../utils":29,"./DataReader":15}],18:[function(a,b,c){"use strict";function d(a){e.call(this,a)}var e=a("./DataReader"),f=a("../utils");f.inherits(d,e),/**
 * @see DataReader.byteAt
 */
d.prototype.byteAt=function(a){return this.data[a]},/**
 * @see DataReader.lastIndexOfSignature
 */
d.prototype.lastIndexOfSignature=function(a){for(var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=this.length-4;f>=0;--f)if(this.data[f]===b&&this.data[f+1]===c&&this.data[f+2]===d&&this.data[f+3]===e)return f;return-1},/**
 * @see DataReader.readAndCheckSignature
 */
d.prototype.readAndCheckSignature=function(a){var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=this.readData(4);return b===f[0]&&c===f[1]&&d===f[2]&&e===f[3]},/**
 * @see DataReader.readData
 */
d.prototype.readData=function(a){if(this.checkOffset(a),0===a)
// in IE10, when using subarray(idx, idx), we get the array [0x00] instead of [].
return new Uint8Array(0);var b=this.data.subarray(this.index,this.index+a);return this.index+=a,b},b.exports=d},{"../utils":29,"./DataReader":15}],19:[function(a,b,c){"use strict";var d=a("../utils"),e=a("../support"),f=a("./StringReader"),g=a("./NodeBufferReader"),h=a("./Uint8ArrayReader");/**
 * Create a reader adapted to the data.
 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data to read.
 * @param {boolean} optimizedBinaryString true if the data is a binary string, false otherwise.
 * @return {DataReader} the data reader.
 */
b.exports=function(a,b){var c=d.getTypeOf(a);return"string"!==c||e.uint8array?"nodebuffer"===c?new g(a):new h(d.transformTo("uint8array",a)):new f(a,b)}},{"../support":27,"../utils":29,"./NodeBufferReader":16,"./StringReader":17,"./Uint8ArrayReader":18}],20:[function(a,b,c){"use strict";c.LOCAL_FILE_HEADER="PK",c.CENTRAL_FILE_HEADER="PK",c.CENTRAL_DIRECTORY_END="PK",c.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",c.ZIP64_CENTRAL_DIRECTORY_END="PK",c.DATA_DESCRIPTOR="PK\b"},{}],21:[function(a,b,c){"use strict";/**
 * A worker which convert chunks to a specified type.
 * @constructor
 * @param {String} destType the destination type.
 */
function d(a){e.call(this,"ConvertWorker to "+a),this.destType=a}var e=a("./GenericWorker"),f=a("../utils");f.inherits(d,e),/**
 * @see GenericWorker.processChunk
 */
d.prototype.processChunk=function(a){this.push({data:f.transformTo(this.destType,a.data),meta:a.meta})},b.exports=d},{"../utils":29,"./GenericWorker":25}],22:[function(a,b,c){"use strict";/**
 * A worker which calculate the crc32 of the data flowing through.
 * @constructor
 */
function d(){e.call(this,"Crc32Probe")}var e=a("./GenericWorker"),f=a("../crc32"),g=a("../utils");g.inherits(d,e),/**
 * @see GenericWorker.processChunk
 */
d.prototype.processChunk=function(a){this.streamInfo.crc32=f(a.data,this.streamInfo.crc32||0),this.push(a)},b.exports=d},{"../crc32":4,"../utils":29,"./GenericWorker":25}],23:[function(a,b,c){"use strict";/**
 * A worker which calculate the total length of the data flowing through.
 * @constructor
 * @param {String} propName the name used to expose the length
 */
function d(a){f.call(this,"DataLengthProbe for "+a),this.propName=a,this.withStreamInfo(a,0)}var e=a("../utils"),f=a("./GenericWorker");e.inherits(d,f),/**
 * @see GenericWorker.processChunk
 */
d.prototype.processChunk=function(a){if(a){var b=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=b+a.data.length}f.prototype.processChunk.call(this,a)},b.exports=d},{"../utils":29,"./GenericWorker":25}],24:[function(a,b,c){"use strict";/**
 * A worker that reads a content and emits chunks.
 * @constructor
 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data to split
 */
function d(a){var b=e.getTypeOf(a);f.call(this,"DataWorker for "+b),this.index=0,this.max=a&&a.length||0,this.data=a,this.type=b,this._tickScheduled=!1}var e=a("../utils"),f=a("./GenericWorker"),g=16384;e.inherits(d,f),/**
 * @see GenericWorker.cleanUp
 */
d.prototype.cleanUp=function(){f.prototype.cleanUp.call(this),this.data=null},/**
 * @see GenericWorker.resume
 */
d.prototype.resume=function(){return f.prototype.resume.call(this)?(this._tickScheduled||(this._tickScheduled=!0,e.delay(this._tickAndRepeat,[],this)),!0):!1},/**
 * Trigger a tick a schedule an other call to this function.
 */
d.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isFinished||(this._tick(),this.isFinished||(e.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},/**
 * Read and push a chunk.
 */
d.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var a=g,b=null,c=Math.min(this.max,this.index+a);if(this.index>=this.max)
// EOF
return this.end();switch(this.type){case"string":b=this.data.substring(this.index,c);break;case"uint8array":b=this.data.subarray(this.index,c);break;case"array":case"nodebuffer":b=this.data.slice(this.index,c)}return this.index=c,this.push({data:b,meta:{percent:this.max?this.index/this.max*100:0}})},b.exports=d},{"../utils":29,"./GenericWorker":25}],25:[function(a,b,c){"use strict";/**
 * A worker that does nothing but passing chunks to the next one. This is like
 * a nodejs stream but with some differences. On the good side :
 * - it works on IE 6-9 without any issue / polyfill
 * - it weights less than the full dependencies bundled with browserify
 * - it forwards errors (no need to declare an error handler EVERYWHERE)
 *
 * A chunk is an object with 2 attributes : `meta` and `data`. The former is an
 * object containing anything (`percent` for example), see each worker for more
 * details. The latter is the real data (String, Uint8Array, etc).
 *
 * @constructor
 * @param {String} name the name of the stream (mainly used for debugging purposes)
 */
function d(a){
// the name of the worker
this.name=a||"default",
// an object containing metadata about the workers chain
this.streamInfo={},
// an error which happened when the worker was paused
this.generatedError=null,
// an object containing metadata to be merged by this worker into the general metadata
this.extraStreamInfo={},
// true if the stream is paused (and should not do anything), false otherwise
this.isPaused=!0,
// true if the stream is finished (and should not do anything), false otherwise
this.isFinished=!1,
// the event listeners
this._listeners={data:[],end:[],error:[]},
// the previous worker, if any
this.previous=null}a("../utils");d.prototype={/**
     * Push a chunk to the next workers.
     * @param {Object} chunk the chunk to push
     */
push:function(a){this.emit("data",a)},/**
     * End the stream.
     * @return {Boolean} true if this call ended the worker, false otherwise.
     */
end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(a){this.emit("error",a)}return!0},/**
     * End the stream with an error.
     * @param {Error} e the error which caused the premature end.
     * @return {Boolean} true if this call ended the worker with an error, false otherwise.
     */
error:function(a){
// in the workers chain exploded in the middle of the chain,
// the error event will go downward but we also need to notify
// workers upward that there has been an error.
return this.isFinished?!1:(this.isPaused?this.generatedError=a:(this.isFinished=!0,this.emit("error",a),this.previous&&this.previous.error(a),this.cleanUp()),!0)},/**
     * Add a callback on an event.
     * @param {String} name the name of the event (data, end, error)
     * @param {Function} listener the function to call when the event is triggered
     * @return {GenericWorker} the current object for chainability
     */
on:function(a,b){return this._listeners[a].push(b),this},/**
     * Clean any references when a worker is ending.
     */
cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},/**
     * Trigger an event. This will call registered callback with the provided arg.
     * @param {String} name the name of the event (data, end, error)
     * @param {Object} arg the argument to call the callback with.
     */
emit:function(a,b){if(this._listeners[a])for(var c=0;c<this._listeners[a].length;c++)this._listeners[a][c].call(this,b)},/**
     * Chain a worker with an other.
     * @param {Worker} next the worker receiving events from the current one.
     * @return {worker} the next worker for chainability
     */
pipe:function(a){return a.registerPrevious(this)},/**
     * Same as `pipe` in the other direction.
     * Using an API with `pipe(next)` is very easy.
     * Implementing the API with the point of view of the next one registering
     * a source is easier, see the ZipFileWorker.
     * @param {Worker} previous the previous worker, sending events to this one
     * @return {Worker} the current worker for chainability
     */
registerPrevious:function(a){
// sharing the streamInfo...
this.streamInfo=a.streamInfo,
// ... and adding our own bits
this.mergeStreamInfo(),this.previous=a;var b=this;return a.on("data",function(a){b.processChunk(a)}),a.on("end",function(){b.end()}),a.on("error",function(a){b.error(a)}),this},/**
     * Pause the stream so it doesn't send events anymore.
     * @return {Boolean} true if this call paused the worker, false otherwise.
     */
pause:function(){return this.isPaused||this.isFinished?!1:(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},/**
     * Resume a paused stream.
     * @return {Boolean} true if this call resumed the worker, false otherwise.
     */
resume:function(){if(!this.isPaused||this.isFinished)return!1;this.isPaused=!1;
// if true, the worker tried to resume but failed
var a=!1;return this.generatedError&&(this.error(this.generatedError),a=!0),this.previous&&this.previous.resume(),!a},/**
     * Flush any remaining bytes as the stream is ending.
     */
flush:function(){},/**
     * Process a chunk. This is usually the method overridden.
     * @param {Object} chunk the chunk to process.
     */
processChunk:function(a){this.push(a)},/**
     * Add a key/value to be added in the workers chain streamInfo once activated.
     * @param {String} key the key to use
     * @param {Object} value the associated value
     * @return {Worker} the current worker for chainability
     */
withStreamInfo:function(a,b){return this.extraStreamInfo[a]=b,this.mergeStreamInfo(),this},/**
     * Merge this worker's streamInfo into the chain's streamInfo.
     */
mergeStreamInfo:function(){for(var a in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(a)&&(this.streamInfo[a]=this.extraStreamInfo[a])},/**
     *
     * Pretty print the workers chain.
     */
toString:function(){var a="Worker "+this.name;return this.previous?this.previous+" -> "+a:a}},b.exports=d},{"../utils":29}],26:[function(a,b,c){(function(c){"use strict";/**
 * Apply the final transformation of the data. If the user wants a Blob for
 * example, it's easier to work with an U8intArray and finally do the
 * ArrayBuffer/Blob conversion.
 * @param {String} type the name of the final type
 * @param {String|Uint8Array|Buffer} content the content to transform
 * @param {String} mimeType the mime type of the content, if applicable.
 * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the content in the right format.
 */
function d(a,b,c){switch(a){case"blob":return h.newBlob(h.transformTo("arraybuffer",b),c);case"base64":return k.encode(b);default:return h.transformTo(a,b)}}/**
 * Concatenate an array of data of the given type.
 * @param {String} type the type of the data in the given array.
 * @param {Array} dataArray the array containing the data chunks to concatenate
 * @return {String|Uint8Array|Buffer} the concatenated data
 * @throws Error if the asked type is unsupported
 */
function e(a,b){var d,e=0,f=null,g=0;for(d=0;d<b.length;d++)g+=b[d].length;switch(a){case"string":return b.join("");case"uint8array":for(f=new Uint8Array(g),d=0;d<b.length;d++)f.set(b[d],e),e+=b[d].length;return f;case"nodebuffer":return c.concat(b);default:throw new Error("concat : unsupported type '"+a+"'")}}/**
 * Listen a StreamHelper, accumulate its content and concatenate it into a
 * complete block.
 * @param {StreamHelper} helper the helper to use.
 * @param {Function} updateCallback a callback called on each update. Called
 * with one arg :
 * - the metadata linked to the update received.
 * @return Promise the promise for the accumulation.
 */
function f(a,b){return new m(function(c,f){var g=[],h=a._internalType,i=a._outputType,j=a._mimeType;a.on("data",function(a,c){g.push(a),b&&b(c)}).on("error",function(a){g=[],f(a)}).on("end",function(){try{var a=d(i,e(h,g),j);c(a)}catch(b){f(b)}g=[]}).resume()})}/**
 * An helper to easily use workers outside of JSZip.
 * @constructor
 * @param {Worker} worker the worker to wrap
 * @param {String} outputType the type of data expected by the use
 * @param {String} mimeType the mime type of the content, if applicable.
 */
function g(a,b,c){var d=b;switch(b){case"blob":case"arraybuffer":d="uint8array";break;case"base64":d="string"}try{
// the type used internally
this._internalType=d,
// the type used to output results
this._outputType=b,
// the mime type
this._mimeType=c,h.checkSupport(d),this._worker=a.pipe(new i(d))}catch(e){this._worker=new j,this._worker.error(e)}}var h=a("../utils"),i=a("./ConvertWorker"),j=a("./GenericWorker"),k=a("../base64"),l=a("../nodejs/NodejsStreamOutputAdapter"),m=a("../external").Promise;g.prototype={/**
     * Listen a StreamHelper, accumulate its content and concatenate it into a
     * complete block.
     * @param {Function} updateCb the update callback.
     * @return Promise the promise for the accumulation.
     */
accumulate:function(a){return f(this,a)},/**
     * Add a listener on an event triggered on a stream.
     * @param {String} evt the name of the event
     * @param {Function} fn the listener
     * @return {StreamHelper} the current helper.
     */
on:function(a,b){var c=this;return"data"===a?this._worker.on(a,function(a){b.call(c,a.data,a.meta)}):this._worker.on(a,function(){h.delay(b,arguments,c)}),this},/**
     * Resume the flow of chunks.
     * @return {StreamHelper} the current helper.
     */
resume:function(){return h.delay(this._worker.resume,[],this._worker),this},/**
     * Pause the flow of chunks.
     * @return {StreamHelper} the current helper.
     */
pause:function(){return this._worker.pause(),this},/**
     * Return a nodejs stream for this helper.
     * @param {Function} updateCb the update callback.
     * @return {NodejsStreamOutputAdapter} the nodejs stream.
     */
toNodejsStream:function(a){return new l(this,{objectMode:"nodebuffer"!==this._outputType},a)}},b.exports=g}).call(this,"undefined"!=typeof Buffer?Buffer:void 0)},{"../base64":1,"../external":7,"../nodejs/NodejsStreamOutputAdapter":36,"../utils":29,"./ConvertWorker":21,"./GenericWorker":25}],27:[function(a,b,c){(function(a){"use strict";if(c.base64=!0,c.array=!0,c.string=!0,c.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,c.nodebuffer="undefined"!=typeof a,
// contains true if JSZip can read/generate Uint8Array, false otherwise.
c.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)c.blob=!1;else{var b=new ArrayBuffer(0);try{c.blob=0===new Blob([b],{type:"application/zip"}).size}catch(d){try{var e=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,f=new e;f.append(b),c.blob=0===f.getBlob("application/zip").size}catch(d){c.blob=!1}}}}).call(this,"undefined"!=typeof Buffer?Buffer:void 0)},{}],28:[function(a,b,c){"use strict";/**
 * A worker to decode utf8 encoded binary chunks into string chunks.
 * @constructor
 */
function d(){i.call(this,"utf-8 decode"),
// the last bytes if a chunk didn't end with a complete codepoint.
this.leftOver=null}/**
 * A worker to endcode string chunks into utf8 encoded binary chunks.
 * @constructor
 */
function e(){i.call(this,"utf-8 encode")}for(var f=a("./utils"),g=a("./support"),h=a("./nodejsUtils"),i=a("./stream/GenericWorker"),j=new Array(256),k=0;256>k;k++)j[k]=k>=252?6:k>=248?5:k>=240?4:k>=224?3:k>=192?2:1;j[254]=j[254]=1;// Invalid sequence start
// convert string to array (typed, when possible)
var l=function(a){var b,c,d,e,f,h=a.length,i=0;
// count binary size
for(e=0;h>e;e++)c=a.charCodeAt(e),55296===(64512&c)&&h>e+1&&(d=a.charCodeAt(e+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),e++)),i+=128>c?1:2048>c?2:65536>c?3:4;
// convert
for(
// allocate buffer
b=g.uint8array?new Uint8Array(i):new Array(i),f=0,e=0;i>f;e++)c=a.charCodeAt(e),55296===(64512&c)&&h>e+1&&(d=a.charCodeAt(e+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),e++)),128>c?b[f++]=c:2048>c?(b[f++]=192|c>>>6,b[f++]=128|63&c):65536>c?(b[f++]=224|c>>>12,b[f++]=128|c>>>6&63,b[f++]=128|63&c):(b[f++]=240|c>>>18,b[f++]=128|c>>>12&63,b[f++]=128|c>>>6&63,b[f++]=128|63&c);return b},m=function(a,b){var c;for(b=b||a.length,b>a.length&&(b=a.length),
// go back from last position, until start of sequence found
c=b-1;c>=0&&128===(192&a[c]);)c--;
// Fuckup - very small and broken sequence,
// return max, because we should return something anyway.
// Fuckup - very small and broken sequence,
// return max, because we should return something anyway.
// If we came to start of buffer - that means vuffer is too small,
// return max too.
return 0>c?b:0===c?b:c+j[a[c]]>b?c:b},n=function(a){var b,c,d,e,g=a.length,h=new Array(2*g);for(c=0,b=0;g>b;)
// quick process ascii
if(d=a[b++],128>d)h[c++]=d;else
// skip 5 & 6 byte codes
if(e=j[d],e>4)h[c++]=65533,b+=e-1;else{
// join the rest
for(
// apply mask on first byte
d&=2===e?31:3===e?15:7;e>1&&g>b;)d=d<<6|63&a[b++],e--;
// terminated by end of string?
e>1?h[c++]=65533:65536>d?h[c++]=d:(d-=65536,h[c++]=55296|d>>10&1023,h[c++]=56320|1023&d)}
// return String.fromCharCode.apply(null, utf16buf);
// shrinkBuf(utf16buf, out)
return h.length!==c&&(h.subarray?h=h.subarray(0,c):h.length=c),f.applyFromCharCode(h)};
// That's all for the pako functions.
/**
 * Transform a javascript string into an array (typed if possible) of bytes,
 * UTF-8 encoded.
 * @param {String} str the string to encode
 * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.
 */
c.utf8encode=function(a){return g.nodebuffer?h.newBuffer(a,"utf-8"):l(a)},/**
 * Transform a bytes array (or a representation) representing an UTF-8 encoded
 * string into a javascript string.
 * @param {Array|Uint8Array|Buffer} buf the data de decode
 * @return {String} the decoded string.
 */
c.utf8decode=function(a){return g.nodebuffer?f.transformTo("nodebuffer",a).toString("utf-8"):(a=f.transformTo(g.uint8array?"uint8array":"array",a),n(a))},f.inherits(d,i),/**
 * @see GenericWorker.processChunk
 */
d.prototype.processChunk=function(a){var b=f.transformTo(g.uint8array?"uint8array":"array",a.data);
// 1st step, re-use what's left of the previous chunk
if(this.leftOver&&this.leftOver.length){if(g.uint8array){var d=b;b=new Uint8Array(d.length+this.leftOver.length),b.set(this.leftOver,0),b.set(d,this.leftOver.length)}else b=this.leftOver.concat(b);this.leftOver=null}var e=m(b),h=b;e!==b.length&&(g.uint8array?(h=b.subarray(0,e),this.leftOver=b.subarray(e,b.length)):(h=b.slice(0,e),this.leftOver=b.slice(e,b.length))),this.push({data:c.utf8decode(h),meta:a.meta})},/**
 * @see GenericWorker.flush
 */
d.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:c.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},c.Utf8DecodeWorker=d,f.inherits(e,i),/**
 * @see GenericWorker.processChunk
 */
e.prototype.processChunk=function(a){this.push({data:c.utf8encode(a.data),meta:a.meta})},c.Utf8EncodeWorker=e},{"./nodejsUtils":13,"./stream/GenericWorker":25,"./support":27,"./utils":29}],29:[function(a,b,c){"use strict";/**
 * The identity function.
 * @param {Object} input the input.
 * @return {Object} the same input.
 */
function d(a){return a}/**
 * Fill in an array with a string.
 * @param {String} str the string to use.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).
 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.
 */
function e(a,b){for(var c=0;c<a.length;++c)b[c]=255&a.charCodeAt(c);return b}/**
 * Transform an array-like object to a string.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
 * @return {String} the result.
 */
function f(a){
// Performances notes :
// --------------------
// String.fromCharCode.apply(null, array) is the fastest, see
// see http://jsperf.com/converting-a-uint8array-to-a-string/2
// but the stack is limited (and we can get huge arrays !).
//
// result += String.fromCharCode(array[i]); generate too many strings !
//
// This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2
// TODO : we now have workers that split the work. Do we still need that ?
var b=65536,d=c.getTypeOf(a),e=!0;if("uint8array"===d?e=k.applyCanBeUsed.uint8array:"nodebuffer"===d&&(e=k.applyCanBeUsed.nodebuffer),e)for(;b>1;)try{return k.stringifyByChunk(a,d,b)}catch(f){b=Math.floor(b/2)}
// no apply or chunk error : slow and painful algorithm
// default browser on android 4.*
return k.stringifyByChar(a)}/**
 * Copy the data from an array-like to an other array-like.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.
 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.
 */
function g(a,b){for(var c=0;c<a.length;c++)b[c]=a[c];return b}var h=a("./support"),i=a("./nodejsUtils"),j=a("asap");/**
 * Convert a string to a "binary string" : a string containing only char codes between 0 and 255.
 * @param {string} str the string to transform.
 * @return {String} the binary string.
 */
c.string2binary=function(a){for(var b="",c=0;c<a.length;c++)b+=String.fromCharCode(255&a.charCodeAt(c));return b},/**
 * Create a new blob with the given content and the given type.
 * @param {String|ArrayBuffer} part the content to put in the blob. DO NOT use
 * an Uint8Array because the stock browser of android 4 won't accept it (it
 * will be silently converted to a string, "[object Uint8Array]").
 * @param {String} type the mime type of the blob.
 * @return {Blob} the created blob.
 */
c.newBlob=function(a,b){c.checkSupport("blob");try{
// Blob constructor
return new Blob([a],{type:b})}catch(d){try{
// deprecated, browser only, old way
var e=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,f=new e;return f.append(a),f.getBlob(b)}catch(d){
// well, fuck ?!
throw new Error("Bug : can't construct the Blob.")}}};/**
 * An helper for the function arrayLikeToString.
 * This contains static informations and functions that
 * can be optimized by the browser JIT compiler.
 */
var k={/**
     * Transform an array of int into a string, chunk by chunk.
     * See the performances notes on arrayLikeToString.
     * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
     * @param {String} type the type of the array.
     * @param {Integer} chunk the chunk size.
     * @return {String} the resulting string.
     * @throws Error if the chunk is too big for the stack.
     */
stringifyByChunk:function(a,b,c){var d=[],e=0,f=a.length;
// shortcut
if(c>=f)return String.fromCharCode.apply(null,a);for(;f>e;)"array"===b||"nodebuffer"===b?d.push(String.fromCharCode.apply(null,a.slice(e,Math.min(e+c,f)))):d.push(String.fromCharCode.apply(null,a.subarray(e,Math.min(e+c,f)))),e+=c;return d.join("")},/**
     * Call String.fromCharCode on every item in the array.
     * This is the naive implementation, which generate A LOT of intermediate string.
     * This should be used when everything else fail.
     * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
     * @return {String} the result.
     */
stringifyByChar:function(a){for(var b="",c=0;c<a.length;c++)b+=String.fromCharCode(a[c]);return b},applyCanBeUsed:{/**
         * true if the browser accepts to use String.fromCharCode on Uint8Array
         */
uint8array:function(){try{return h.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(a){return!1}}(),/**
         * true if the browser accepts to use String.fromCharCode on nodejs Buffer.
         */
nodebuffer:function(){try{return h.nodebuffer&&1===String.fromCharCode.apply(null,i.newBuffer(1)).length}catch(a){return!1}}()}};c.applyFromCharCode=f;
// a matrix containing functions to transform everything into everything.
var l={};
// string to ?
l.string={string:d,array:function(a){return e(a,new Array(a.length))},arraybuffer:function(a){return l.string.uint8array(a).buffer},uint8array:function(a){return e(a,new Uint8Array(a.length))},nodebuffer:function(a){return e(a,i.newBuffer(a.length))}},
// array to ?
l.array={string:f,array:d,arraybuffer:function(a){return new Uint8Array(a).buffer},uint8array:function(a){return new Uint8Array(a)},nodebuffer:function(a){return i.newBuffer(a)}},
// arraybuffer to ?
l.arraybuffer={string:function(a){return f(new Uint8Array(a))},array:function(a){return g(new Uint8Array(a),new Array(a.byteLength))},arraybuffer:d,uint8array:function(a){return new Uint8Array(a)},nodebuffer:function(a){return i.newBuffer(new Uint8Array(a))}},
// uint8array to ?
l.uint8array={string:f,array:function(a){return g(a,new Array(a.length))},arraybuffer:function(a){return a.buffer},uint8array:d,nodebuffer:function(a){return i.newBuffer(a)}},
// nodebuffer to ?
l.nodebuffer={string:f,array:function(a){return g(a,new Array(a.length))},arraybuffer:function(a){return l.nodebuffer.uint8array(a).buffer},uint8array:function(a){return g(a,new Uint8Array(a.length))},nodebuffer:d},/**
 * Transform an input into any type.
 * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.
 * If no output type is specified, the unmodified input will be returned.
 * @param {String} outputType the output type.
 * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.
 * @throws {Error} an Error if the browser doesn't support the requested output type.
 */
c.transformTo=function(a,b){if(b||(
// undefined, null, etc
// an empty string won't harm.
b=""),!a)return b;c.checkSupport(a);var d=c.getTypeOf(b),e=l[d][a](b);return e},/**
 * Return the type of the input.
 * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.
 * @param {Object} input the input to identify.
 * @return {String} the (lowercase) type of the input.
 */
c.getTypeOf=function(a){return"string"==typeof a?"string":"[object Array]"===Object.prototype.toString.call(a)?"array":h.nodebuffer&&i.isBuffer(a)?"nodebuffer":h.uint8array&&a instanceof Uint8Array?"uint8array":h.arraybuffer&&a instanceof ArrayBuffer?"arraybuffer":void 0},/**
 * Throw an exception if the type is not supported.
 * @param {String} type the type to check.
 * @throws {Error} an Error if the browser doesn't support the requested type.
 */
c.checkSupport=function(a){var b=h[a.toLowerCase()];if(!b)throw new Error(a+" is not supported by this browser")},c.MAX_VALUE_16BITS=65535,c.MAX_VALUE_32BITS=-1,// well, "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF" is parsed as -1
/**
 * Prettify a string read as binary.
 * @param {string} str the string to prettify.
 * @return {string} a pretty string.
 */
c.pretty=function(a){var b,c,d="";for(c=0;c<(a||"").length;c++)b=a.charCodeAt(c),d+="\\x"+(16>b?"0":"")+b.toString(16).toUpperCase();return d},/**
* Cross-window, cross-Node-context regular expression detection
* @param  {Object}  object Anything
* @return {Boolean}        true if the object is a regular expression,
* false otherwise
*/
c.isRegExp=function(a){return"[object RegExp]"===Object.prototype.toString.call(a)},/**
 * Defer the call of a function.
 * @param {Function} callback the function to call asynchronously.
 * @param {Array} args the arguments to give to the callback.
 */
c.delay=function(a,b,c){j(function(){a.apply(c||null,b||[])})},/**
 * Extends a prototype with an other, without calling a constructor with
 * side effects. Inspired by nodejs' `utils.inherits`
 * @param {Function} ctor the constructor to augment
 * @param {Function} superCtor the parent constructor to use
 */
c.inherits=function(a,b){var c=function(){};c.prototype=b.prototype,a.prototype=new c}},{"./nodejsUtils":13,"./support":27,asap:33}],30:[function(a,b,c){"use strict";
//  class ZipEntries {{{
/**
 * All the entries in the zip file.
 * @constructor
 * @param {Object} loadOptions Options for loading the stream.
 */
function d(a){this.files=[],this.loadOptions=a}var e=a("./reader/readerFor"),f=a("./utils"),g=a("./signature"),h=a("./zipEntry"),i=a("./utf8");d.prototype={/**
     * Check that the reader is on the speficied signature.
     * @param {string} expectedSignature the expected signature.
     * @throws {Error} if it is an other signature.
     */
checkSignature:function(a){if(!this.reader.readAndCheckSignature(a)){this.reader.index-=4;var b=this.reader.readString(4);throw new Error("Corrupted zip or bug : unexpected signature ("+f.pretty(b)+", expected "+f.pretty(a)+")")}},/**
     * Read the end of the central directory.
     */
readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2),
// warning : the encoding depends of the system locale
// On a linux machine with LANG=en_US.utf8, this field is utf8 encoded.
// On a windows machine, this field is encoded with the localized windows code page.
this.zipComment=this.reader.readString(this.zipCommentLength),
// To get consistent behavior with the generation part, we will assume that
// this is utf8 encoded.
this.zipComment=i.utf8decode(this.zipComment)},/**
     * Read the end of the Zip 64 central directory.
     * Not merged with the method readEndOfCentral :
     * The end of central can coexist with its Zip64 brother,
     * I don't want to read the wrong number of bytes !
     */
readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),
// this.versionMadeBy = this.reader.readString(2);
// this.versionNeeded = this.reader.readInt(2);
this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var a,b,c,d=this.zip64EndOfCentralSize-44,e=0;d>e;)a=this.reader.readInt(2),b=this.reader.readInt(4),c=this.reader.readData(b),this.zip64ExtensibleData[a]={id:a,length:b,value:c}},/**
     * Read the end of the Zip 64 central directory locator.
     */
readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),this.disksCount>1)throw new Error("Multi-volumes zip are not supported")},/**
     * Read the local files, based on the offset read in the central part.
     */
readLocalFiles:function(){var a,b;for(a=0;a<this.files.length;a++)b=this.files[a],this.reader.setIndex(b.localHeaderOffset),this.checkSignature(g.LOCAL_FILE_HEADER),b.readLocalPart(this.reader),b.handleUTF8(),b.processAttributes()},/**
     * Read the central directory.
     */
readCentralDir:function(){var a;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(g.CENTRAL_FILE_HEADER);)a=new h({zip64:this.zip64},this.loadOptions),a.readCentralPart(this.reader),this.files.push(a)},/**
     * Read the end of central directory.
     */
readEndOfCentral:function(){var a=this.reader.lastIndexOfSignature(g.CENTRAL_DIRECTORY_END);if(-1===a){
// Check if the content is a truncated zip or complete garbage.
// A "LOCAL_FILE_HEADER" is not required at the beginning (auto
// extractible zip for example) but it can give a good hint.
// If an ajax request was used without responseType, we will also
// get unreadable data.
var b=!0;try{this.reader.setIndex(0),this.checkSignature(g.LOCAL_FILE_HEADER),b=!1}catch(c){}throw b?new Error("Can't find end of central directory : is this a zip file ? If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html"):new Error("Corrupted zip : can't find end of central directory")}/* extract from the zip spec :
            4)  If one of the fields in the end of central directory
                record is too small to hold required data, the field
                should be set to -1 (0xFFFF or 0xFFFFFFFF) and the
                ZIP64 format record should be created.
            5)  The end of central directory record and the
                Zip64 end of central directory locator record must
                reside on the same disk when splitting or spanning
                an archive.
         */
if(this.reader.setIndex(a),this.checkSignature(g.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===f.MAX_VALUE_16BITS||this.diskWithCentralDirStart===f.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===f.MAX_VALUE_16BITS||this.centralDirRecords===f.MAX_VALUE_16BITS||this.centralDirSize===f.MAX_VALUE_32BITS||this.centralDirOffset===f.MAX_VALUE_32BITS){if(this.zip64=!0,a=this.reader.lastIndexOfSignature(g.ZIP64_CENTRAL_DIRECTORY_LOCATOR),-1===a)throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");this.reader.setIndex(a),this.checkSignature(g.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),
// now the zip64 EOCD record
this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(g.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}},prepareReader:function(a){this.reader=e(a,this.loadOptions.optimizedBinaryString)},/**
     * Read a zip file and create ZipEntries.
     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.
     */
load:function(a){this.prepareReader(a),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},
// }}} end of ZipEntries
b.exports=d},{"./reader/readerFor":19,"./signature":20,"./utf8":28,"./utils":29,"./zipEntry":31}],31:[function(a,b,c){"use strict";
// class ZipEntry {{{
/**
 * An entry in the zip file.
 * @constructor
 * @param {Object} options Options of the current file.
 * @param {Object} loadOptions Options for loading the stream.
 */
function d(a,b){this.options=a,this.loadOptions=b}var e=a("./reader/readerFor"),f=a("./utils"),g=a("./compressedObject"),h=a("./object"),i=(a("./stream/StreamHelper"),a("./compressions")),j=0,k=3,l=function(a){for(var b in i)if(i.hasOwnProperty(b)&&i[b].magic===a)return i[b];return null};d.prototype={/**
     * say if the file is encrypted.
     * @return {boolean} true if the file is encrypted, false otherwise.
     */
isEncrypted:function(){
// bit 1 is set
return 1===(1&this.bitFlag)},/**
     * say if the file has utf-8 filename/comment.
     * @return {boolean} true if the filename/comment is in utf-8, false otherwise.
     */
useUTF8:function(){
// bit 11 is set
return 2048===(2048&this.bitFlag)},/**
     * Read the local part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
readLocalPart:function(a){var b,c;if(
// we already know everything from the central dir !
// If the central dir data are false, we are doomed.
// On the bright side, the local part is scary  : zip64, data descriptors, both, etc.
// The less data we get here, the more reliable this should be.
// Let's skip the whole header and dash to the data !
a.skip(22),
// in some zip created on windows, the filename stored in the central dir contains \ instead of /.
// Strangely, the filename here is OK.
// I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes
// or APPNOTE#4.4.17.1, "All slashes MUST be forward slashes '/'") but there are a lot of bad zip generators...
// Search "unzip mismatching "local" filename continuing with "central" filename version" on
// the internet.
//
// I think I see the logic here : the central directory is used to display
// content and the local directory is used to extract the files. Mixing / and \
// may be used to display \ to windows users and use / when extracting the files.
// Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394
this.fileNameLength=a.readInt(2),c=a.readInt(2),this.fileName=a.readData(this.fileNameLength),a.skip(c),-1==this.compressedSize||-1==this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize == -1 || uncompressedSize == -1)");if(b=l(this.compressionMethod),null===b)// no compression found
throw new Error("Corrupted zip : compression "+f.pretty(this.compressionMethod)+" unknown (inner file : "+f.transformTo("string",this.fileName)+")");this.decompressed=new g(this.compressedSize,this.uncompressedSize,this.crc32,b,a.readData(this.compressedSize))},/**
     * Read the central part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
readCentralPart:function(a){this.versionMadeBy=a.readInt(2),a.skip(2),
// this.versionNeeded = reader.readInt(2);
this.bitFlag=a.readInt(2),this.compressionMethod=a.readString(2),this.date=a.readDate(),this.crc32=a.readInt(4),this.compressedSize=a.readInt(4),this.uncompressedSize=a.readInt(4);var b=a.readInt(2);if(this.extraFieldsLength=a.readInt(2),this.fileCommentLength=a.readInt(2),this.diskNumberStart=a.readInt(2),this.internalFileAttributes=a.readInt(2),this.externalFileAttributes=a.readInt(4),this.localHeaderOffset=a.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");
// will be read in the local part, see the comments there
a.skip(b),this.readExtraFields(a),this.parseZIP64ExtraField(a),this.fileComment=a.readData(this.fileCommentLength)},/**
     * Parse the external file attributes and get the unix/dos permissions.
     */
processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var a=this.versionMadeBy>>8;
// Check if we have the DOS directory flag set.
// We look for it in the DOS and UNIX permissions
// but some unknown platform could set it as a compatibility flag.
this.dir=!!(16&this.externalFileAttributes),a===j&&(
// first 6 bits (0 to 5)
this.dosPermissions=63&this.externalFileAttributes),a===k&&(this.unixPermissions=this.externalFileAttributes>>16&65535),
// fail safe : if the name ends with a / it probably means a folder
this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},/**
     * Parse the ZIP64 extra field and merge the info in the current ZipEntry.
     * @param {DataReader} reader the reader to use.
     */
parseZIP64ExtraField:function(a){if(this.extraFields[1]){
// should be something, preparing the extra reader
var b=e(this.extraFields[1].value);
// I really hope that these 64bits integer can fit in 32 bits integer, because js
// won't let us have more.
this.uncompressedSize===f.MAX_VALUE_32BITS&&(this.uncompressedSize=b.readInt(8)),this.compressedSize===f.MAX_VALUE_32BITS&&(this.compressedSize=b.readInt(8)),this.localHeaderOffset===f.MAX_VALUE_32BITS&&(this.localHeaderOffset=b.readInt(8)),this.diskNumberStart===f.MAX_VALUE_32BITS&&(this.diskNumberStart=b.readInt(4))}},/**
     * Read the central part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
readExtraFields:function(a){var b,c,d,e=a.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});a.index<e;)b=a.readInt(2),c=a.readInt(2),d=a.readData(c),this.extraFields[b]={id:b,length:c,value:d}},/**
     * Apply an UTF8 transformation if needed.
     */
handleUTF8:function(){if(this.useUTF8())this.fileNameStr=h.utf8decode(this.fileName),this.fileCommentStr=h.utf8decode(this.fileComment);else{var a=this.findExtraFieldUnicodePath();null!==a?this.fileNameStr=a:this.fileNameStr=f.transformTo("string",this.fileName);var b=this.findExtraFieldUnicodeComment();null!==b?this.fileCommentStr=b:this.fileCommentStr=f.transformTo("string",this.fileComment)}},/**
     * Find the unicode path declared in the extra field, if any.
     * @return {String} the unicode path, null otherwise.
     */
findExtraFieldUnicodePath:function(){var a=this.extraFields[28789];if(a){var b=e(a.value);
// wrong version
// wrong version
// the crc of the filename changed, this field is out of date.
return 1!==b.readInt(1)?null:h.crc32(this.fileName)!==b.readInt(4)?null:h.utf8decode(b.readData(a.length-5))}return null},/**
     * Find the unicode comment declared in the extra field, if any.
     * @return {String} the unicode comment, null otherwise.
     */
findExtraFieldUnicodeComment:function(){var a=this.extraFields[25461];if(a){var b=e(a.value);
// wrong version
// wrong version
// the crc of the comment changed, this field is out of date.
return 1!==b.readInt(1)?null:h.crc32(this.fileComment)!==b.readInt(4)?null:h.utf8decode(b.readData(a.length-5))}return null}},b.exports=d},{"./compressedObject":2,"./compressions":3,"./object":14,"./reader/readerFor":19,"./stream/StreamHelper":26,"./utils":29}],32:[function(a,b,c){"use strict";var d=a("./stream/StreamHelper"),e=a("./stream/DataWorker"),f=a("./utf8"),g=a("./compressedObject"),h=a("./stream/GenericWorker"),i=function(a,b,c){this.name=a,this.dir=c.dir,this.date=c.date,this.comment=c.comment,this.unixPermissions=c.unixPermissions,this.dosPermissions=c.dosPermissions,this._data=b,this.options=c,/*
     * This object contains initial values for dir and date.
     * With them, we can check if the user changed the deprecated metadata in
     * `ZipObject#options` or not.
     */
this._initialMetadata={dir:c.dir,date:c.date}};i.prototype={/**
     * Create an internal stream for the content of this object.
     * @param {String} type the type of each chunk.
     * @return StreamHelper the stream.
     */
internalStream:function(a){var b=a.toLowerCase(),c="string"===b||"text"===b;"binarystring"!==b&&"text"!==b||(b="string");var e=this._decompressWorker(),g=!this.options.binary;return g&&!c&&(e=e.pipe(new f.Utf8EncodeWorker)),!g&&c&&(e=e.pipe(new f.Utf8DecodeWorker)),new d(e,b)},/**
     * Prepare the content in the asked type.
     * @param {String} type the type of the result.
     * @param {Function} onUpdate a function to call on each internal update.
     * @return Promise the promise of the result.
     */
async:function(a,b){return this.internalStream(a).accumulate(b)},/**
     * Prepare the content as a nodejs stream.
     * @param {String} type the type of each chunk.
     * @param {Function} onUpdate a function to call on each internal update.
     * @return Stream the stream.
     */
nodeStream:function(a,b){return this.internalStream(a).toNodejsStream(b)},/**
     * Return a worker for the compressed content.
     * @private
     * @param {Object} compression the compression object to use.
     * @param {Object} compressionOptions the options to use when compressing.
     * @return Worker the worker.
     */
_compressWorker:function(a,b){if(this._data instanceof g&&this._data.compression.magic===a.magic)return this._data.getCompressedWorker();var c=this._decompressWorker();return this.options.binary||(c=c.pipe(new f.Utf8EncodeWorker)),g.createWorkerFrom(c,a,b)},/**
     * Return a worker for the decompressed content.
     * @private
     * @return Worker the worker.
     */
_decompressWorker:function(){return this._data instanceof g?this._data.getContentWorker():this._data instanceof h?this._data:new e(this._data)}};for(var j=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],k=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},l=0;l<j.length;l++)i.prototype[j[l]]=k;b.exports=i},{"./compressedObject":2,"./stream/DataWorker":24,"./stream/GenericWorker":25,"./stream/StreamHelper":26,"./utf8":28}],33:[function(a,b,c){"use strict";function d(){if(i.length)throw i.shift()}function e(a){var b;b=h.length?h.pop():new f,b.task=a,g(b)}
// We wrap tasks with recyclable task objects.  A task object implements
// `call`, just like a function.
function f(){this.task=null}
// rawAsap provides everything we need except exception management.
var g=a("./raw"),h=[],i=[],j=g.makeRequestCallFromTimer(d);/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */
b.exports=e,
// The sole purpose of wrapping the task is to catch the exception and recycle
// the task object after its single use.
f.prototype.call=function(){try{this.task.call()}catch(a){e.onerror?
// This hook exists purely for testing purposes.
// Its name will be periodically randomized to break any code that
// depends on its existence.
e.onerror(a):(
// In a web browser, exceptions are not fatal. However, to avoid
// slowing down the queue of pending tasks, we rethrow the error in a
// lower priority turn.
i.push(a),j())}finally{this.task=null,h[h.length]=this}}},{"./raw":34}],34:[function(a,b,c){(function(a){"use strict";function c(a){h.length||(g(),i=!0),
// Equivalent to push, but avoids a function call.
h[h.length]=a}
// The flush function processes all tasks that have been scheduled with
// `rawAsap` unless and until one of those tasks throws an exception.
// If a task throws an exception, `flush` ensures that its state will remain
// consistent and will resume where it left off when called again.
// However, `flush` does not make any arrangements to be called again if an
// exception is thrown.
function d(){for(;j<h.length;){var a=j;
// Prevent leaking memory for long chains of recursive calls to `asap`.
// If we call `asap` within tasks scheduled by `asap`, the queue will
// grow, but to avoid an O(n) walk for every task we execute, we don't
// shift tasks off the queue after they have been executed.
// Instead, we periodically shift 1024 tasks off the queue.
if(j+=1,h[a].call(),j>k){
// Manually shift all values starting at the index back to the
// beginning of the queue.
for(var b=0,c=h.length-j;c>b;b++)h[b]=h[b+j];h.length-=j,j=0}}h.length=0,j=0,i=!1}
// To request a high priority event, we induce a mutation observer by toggling
// the text of a text node between "1" and "-1".
function e(a){var b=1,c=new l(a),d=document.createTextNode("");return c.observe(d,{characterData:!0}),function(){b=-b,d.data=b}}
// The message channel technique was discovered by Malte Ubl and was the
// original foundation for this library.
// http://www.nonblocking.io/2011/06/windownexttick.html
// Safari 6.0.5 (at least) intermittently fails to create message ports on a
// page's first load. Thankfully, this version of Safari supports
// MutationObservers, so we don't need to fall back in that case.
// function makeRequestCallFromMessageChannel(callback) {
//     var channel = new MessageChannel();
//     channel.port1.onmessage = callback;
//     return function requestCall() {
//         channel.port2.postMessage(0);
//     };
// }
// For reasons explained above, we are also unable to use `setImmediate`
// under any circumstances.
// Even if we were, there is another bug in Internet Explorer 10.
// It is not sufficient to assign `setImmediate` to `requestFlush` because
// `setImmediate` must be called *by name* and therefore must be wrapped in a
// closure.
// Never forget.
// function makeRequestCallFromSetImmediate(callback) {
//     return function requestCall() {
//         setImmediate(callback);
//     };
// }
// Safari 6.0 has a problem where timers will get lost while the user is
// scrolling. This problem does not impact ASAP because Safari 6.0 supports
// mutation observers, so that implementation is used instead.
// However, if we ever elect to use timers in Safari, the prevalent work-around
// is to add a scroll event listener that calls for a flush.
// `setTimeout` does not call the passed callback if the delay is less than
// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
// even then.
function f(a){return function(){function b(){
// Whichever timer succeeds will cancel both timers and
// execute the callback.
clearTimeout(c),clearInterval(d),a()}
// We dispatch a timeout with a specified delay of 0 for engines that
// can reliably accommodate that request. This will usually be snapped
// to a 4 milisecond delay, but once we're flushing, there's no delay
// between events.
var c=setTimeout(b,0),d=setInterval(b,50)}}
// Use the fastest means possible to execute a task in its own turn, with
// priority over other events including IO, animation, reflow, and redraw
// events in browsers.
//
// An exception thrown by a task will permanently interrupt the processing of
// subsequent tasks. The higher level `asap` function ensures that if an
// exception is thrown by a task, that the task queue will continue flushing as
// soon as possible, but if you use `rawAsap` directly, you are responsible to
// either ensure that no exceptions are thrown from your task, or to manually
// call `rawAsap.requestFlush` if an exception is thrown.
b.exports=c;var g,h=[],i=!1,j=0,k=1024,l=a.MutationObserver||a.WebKitMutationObserver;
// MutationObservers are desirable because they have high priority and work
// reliably everywhere they are implemented.
// They are implemented in all modern browsers.
//
// - Android 4-4.3
// - Chrome 26-34
// - Firefox 14-29
// - Internet Explorer 11
// - iPad Safari 6-7.1
// - iPhone Safari 7-7.1
// - Safari 6-7
g="function"==typeof l?e(d):f(d),c.requestFlush=g,c.makeRequestCallFromTimer=f}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],35:[function(b,c,d){(function(d,e){/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
 * @version   2.1.1
 */
(function(){"use strict";function f(a){return"function"==typeof a||"object"==typeof a&&null!==a}function g(a){return"function"==typeof a}function h(a){return"object"==typeof a&&null!==a}function i(a,b){aa[V]=a,aa[V+1]=b,V+=2,2===V&&T()}
// node
function j(){var a=d.nextTick,b=d.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);return Array.isArray(b)&&"0"===b[1]&&"10"===b[2]&&(a=setImmediate),function(){a(o)}}
// vertx
function k(){return function(){S(o)}}function l(){var a=0,b=new Z(o),c=document.createTextNode("");return b.observe(c,{characterData:!0}),function(){c.data=a=++a%2}}
// web worker
function m(){var a=new MessageChannel;return a.port1.onmessage=o,function(){a.port2.postMessage(0)}}function n(){return function(){setTimeout(o,1)}}function o(){for(var a=0;V>a;a+=2){var b=aa[a],c=aa[a+1];b(c),aa[a]=void 0,aa[a+1]=void 0}V=0}function p(){try{var a=b,c=a("vertx");return S=c.runOnLoop||c.runOnContext,k()}catch(d){return n()}}function q(){}function r(){return new TypeError("You cannot resolve a promise with itself")}function s(){return new TypeError("A promises callback cannot return that same promise.")}function t(a){try{return a.then}catch(b){return ea.error=b,ea}}function u(a,b,c,d){try{a.call(b,c,d)}catch(e){return e}}function v(a,b,c){W(function(a){var d=!1,e=u(c,b,function(c){d||(d=!0,b!==c?y(a,c):A(a,c))},function(b){d||(d=!0,B(a,b))},"Settle: "+(a._label||" unknown promise"));!d&&e&&(d=!0,B(a,e))},a)}function w(a,b){b._state===ca?A(a,b._result):b._state===da?B(a,b._result):C(b,void 0,function(b){y(a,b)},function(b){B(a,b)})}function x(a,b){if(b.constructor===a.constructor)w(a,b);else{var c=t(b);c===ea?B(a,ea.error):void 0===c?A(a,b):g(c)?v(a,b,c):A(a,b)}}function y(a,b){a===b?B(a,r()):f(b)?x(a,b):A(a,b)}function z(a){a._onerror&&a._onerror(a._result),D(a)}function A(a,b){a._state===ba&&(a._result=b,a._state=ca,0!==a._subscribers.length&&W(D,a))}function B(a,b){a._state===ba&&(a._state=da,a._result=b,W(z,a))}function C(a,b,c,d){var e=a._subscribers,f=e.length;a._onerror=null,e[f]=b,e[f+ca]=c,e[f+da]=d,0===f&&a._state&&W(D,a)}function D(a){var b=a._subscribers,c=a._state;if(0!==b.length){for(var d,e,f=a._result,g=0;g<b.length;g+=3)d=b[g],e=b[g+c],d?G(c,d,e,f):e(f);a._subscribers.length=0}}function E(){this.error=null}function F(a,b){try{return a(b)}catch(c){return fa.error=c,fa}}function G(a,b,c,d){var e,f,h,i,j=g(c);if(j){if(e=F(c,d),e===fa?(i=!0,f=e.error,e=null):h=!0,b===e)return void B(b,s())}else e=d,h=!0;b._state!==ba||(j&&h?y(b,e):i?B(b,f):a===ca?A(b,e):a===da&&B(b,e))}function H(a,b){try{b(function(b){y(a,b)},function(b){B(a,b)})}catch(c){B(a,c)}}function I(a,b){var c=this;c._instanceConstructor=a,c.promise=new a(q),c._validateInput(b)?(c._input=b,c.length=b.length,c._remaining=b.length,c._init(),0===c.length?A(c.promise,c._result):(c.length=c.length||0,c._enumerate(),0===c._remaining&&A(c.promise,c._result))):B(c.promise,c._validationError())}function J(a){return new ga(this,a).promise}function K(a){function b(a){y(e,a)}function c(a){B(e,a)}/*jshint validthis:true */
var d=this,e=new d(q);if(!U(a))return B(e,new TypeError("You must pass an array to race.")),e;for(var f=a.length,g=0;e._state===ba&&f>g;g++)C(d.resolve(a[g]),void 0,b,c);return e}function L(a){/*jshint validthis:true */
var b=this;if(a&&"object"==typeof a&&a.constructor===b)return a;var c=new b(q);return y(c,a),c}function M(a){/*jshint validthis:true */
var b=this,c=new b(q);return B(c,a),c}function N(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function O(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}/**
      Promise objects represent the eventual result of an asynchronous operation. The
      primary way of interacting with a promise is through its `then` method, which
      registers callbacks to receive either a promise’s eventual value or the reason
      why the promise cannot be fulfilled.

      Terminology
      -----------

      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
      - `thenable` is an object or function that defines a `then` method.
      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
      - `exception` is a value that is thrown using the throw statement.
      - `reason` is a value that indicates why a promise was rejected.
      - `settled` the final resting state of a promise, fulfilled or rejected.

      A promise can be in one of three states: pending, fulfilled, or rejected.

      Promises that are fulfilled have a fulfillment value and are in the fulfilled
      state.  Promises that are rejected have a rejection reason and are in the
      rejected state.  A fulfillment value is never a thenable.

      Promises can also be said to *resolve* a value.  If this value is also a
      promise, then the original promise's settled state will match the value's
      settled state.  So a promise that *resolves* a promise that rejects will
      itself reject, and a promise that *resolves* a promise that fulfills will
      itself fulfill.


      Basic Usage:
      ------------

      ```js
      var promise = new Promise(function(resolve, reject) {
        // on success
        resolve(value);

        // on failure
        reject(reason);
      });

      promise.then(function(value) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Advanced Usage:
      ---------------

      Promises shine when abstracting away asynchronous interactions such as
      `XMLHttpRequest`s.

      ```js
      function getJSON(url) {
        return new Promise(function(resolve, reject){
          var xhr = new XMLHttpRequest();

          xhr.open('GET', url);
          xhr.onreadystatechange = handler;
          xhr.responseType = 'json';
          xhr.setRequestHeader('Accept', 'application/json');
          xhr.send();

          function handler() {
            if (this.readyState === this.DONE) {
              if (this.status === 200) {
                resolve(this.response);
              } else {
                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
              }
            }
          };
        });
      }

      getJSON('/posts.json').then(function(json) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Unlike callbacks, promises are great composable primitives.

      ```js
      Promise.all([
        getJSON('/posts'),
        getJSON('/comments')
      ]).then(function(values){
        values[0] // => postsJSON
        values[1] // => commentsJSON

        return values;
      });
      ```

      @class Promise
      @param {function} resolver
      Useful for tooling.
      @constructor
    */
function P(a){this._id=la++,this._state=void 0,this._result=void 0,this._subscribers=[],q!==a&&(g(a)||N(),this instanceof P||O(),H(this,a))}function Q(){var a;if("undefined"!=typeof e)a=e;else if("undefined"!=typeof self)a=self;else try{a=Function("return this")()}catch(b){throw new Error("polyfill failed because global object is unavailable in this environment")}var c=a.Promise;c&&"[object Promise]"===Object.prototype.toString.call(c.resolve())&&!c.cast||(a.Promise=ma)}var R;R=Array.isArray?Array.isArray:function(a){return"[object Array]"===Object.prototype.toString.call(a)};var S,T,U=R,V=0,W=({}.toString,i),X="undefined"!=typeof window?window:void 0,Y=X||{},Z=Y.MutationObserver||Y.WebKitMutationObserver,$="undefined"!=typeof d&&"[object process]"==={}.toString.call(d),_="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,aa=new Array(1e3);
// Decide what async method to use to triggering processing of queued callbacks:
T=$?j():Z?l():_?m():void 0===X&&"function"==typeof b?p():n();var ba=void 0,ca=1,da=2,ea=new E,fa=new E;I.prototype._validateInput=function(a){return U(a)},I.prototype._validationError=function(){return new Error("Array Methods must be provided an Array")},I.prototype._init=function(){this._result=new Array(this.length)};var ga=I;I.prototype._enumerate=function(){for(var a=this,b=a.length,c=a.promise,d=a._input,e=0;c._state===ba&&b>e;e++)a._eachEntry(d[e],e)},I.prototype._eachEntry=function(a,b){var c=this,d=c._instanceConstructor;h(a)?a.constructor===d&&a._state!==ba?(a._onerror=null,c._settledAt(a._state,b,a._result)):c._willSettleAt(d.resolve(a),b):(c._remaining--,c._result[b]=a)},I.prototype._settledAt=function(a,b,c){var d=this,e=d.promise;e._state===ba&&(d._remaining--,a===da?B(e,c):d._result[b]=c),0===d._remaining&&A(e,d._result)},I.prototype._willSettleAt=function(a,b){var c=this;C(a,void 0,function(a){c._settledAt(ca,b,a)},function(a){c._settledAt(da,b,a)})};var ha=J,ia=K,ja=L,ka=M,la=0,ma=P;P.all=ha,P.race=ia,P.resolve=ja,P.reject=ka,P.prototype={constructor:P,/**
      The primary way of interacting with a promise is through its `then` method,
      which registers callbacks to receive either a promise's eventual value or the
      reason why the promise cannot be fulfilled.

      ```js
      findUser().then(function(user){
        // user is available
      }, function(reason){
        // user is unavailable, and you are given the reason why
      });
      ```

      Chaining
      --------

      The return value of `then` is itself a promise.  This second, 'downstream'
      promise is resolved with the return value of the first promise's fulfillment
      or rejection handler, or rejected if the handler throws an exception.

      ```js
      findUser().then(function (user) {
        return user.name;
      }, function (reason) {
        return 'default name';
      }).then(function (userName) {
        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
        // will be `'default name'`
      });

      findUser().then(function (user) {
        throw new Error('Found user, but still unhappy');
      }, function (reason) {
        throw new Error('`findUser` rejected and we're unhappy');
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
      });
      ```
      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

      ```js
      findUser().then(function (user) {
        throw new PedagogicalException('Upstream error');
      }).then(function (value) {
        // never reached
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // The `PedgagocialException` is propagated all the way down to here
      });
      ```

      Assimilation
      ------------

      Sometimes the value you want to propagate to a downstream promise can only be
      retrieved asynchronously. This can be achieved by returning a promise in the
      fulfillment or rejection handler. The downstream promise will then be pending
      until the returned promise is settled. This is called *assimilation*.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // The user's comments are now available
      });
      ```

      If the assimliated promise rejects, then the downstream promise will also reject.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // If `findCommentsByAuthor` fulfills, we'll have the value here
      }, function (reason) {
        // If `findCommentsByAuthor` rejects, we'll have the reason here
      });
      ```

      Simple Example
      --------------

      Synchronous Example

      ```javascript
      var result;

      try {
        result = findResult();
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js
      findResult(function(result, err){
        if (err) {
          // failure
        } else {
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findResult().then(function(result){
        // success
      }, function(reason){
        // failure
      });
      ```

      Advanced Example
      --------------

      Synchronous Example

      ```javascript
      var author, books;

      try {
        author = findAuthor();
        books  = findBooksByAuthor(author);
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js

      function foundBooks(books) {

      }

      function failure(reason) {

      }

      findAuthor(function(author, err){
        if (err) {
          failure(err);
          // failure
        } else {
          try {
            findBoooksByAuthor(author, function(books, err) {
              if (err) {
                failure(err);
              } else {
                try {
                  foundBooks(books);
                } catch(reason) {
                  failure(reason);
                }
              }
            });
          } catch(error) {
            failure(err);
          }
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findAuthor().
        then(findBooksByAuthor).
        then(function(books){
          // found books
      }).catch(function(reason){
        // something went wrong
      });
      ```

      @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      Useful for tooling.
      @return {Promise}
    */
then:function(a,b){var c=this,d=c._state;if(d===ca&&!a||d===da&&!b)return this;var e=new this.constructor(q),f=c._result;if(d){var g=arguments[d-1];W(function(){G(d,e,g,f)})}else C(c,e,a,b);return e},/**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.

      ```js
      function findAuthor(){
        throw new Error('couldn't find that author');
      }

      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }

      // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```

      @method catch
      @param {Function} onRejection
      Useful for tooling.
      @return {Promise}
    */
"catch":function(a){return this.then(null,a)}};var na=Q,oa={Promise:ma,polyfill:na};/* global define:true module:true window: true */
"function"==typeof a&&a.amd?a(function(){return oa}):"undefined"!=typeof c&&c.exports?c.exports=oa:"undefined"!=typeof this&&(this.ES6Promise=oa),na()}).call(this)}).call(this,b("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:37}],36:[function(a,b,c){},{}],37:[function(a,b,c){function d(){k=!1,h.length?j=h.concat(j):l=-1,j.length&&e()}function e(){if(!k){var a=setTimeout(d);k=!0;for(var b=j.length;b;){for(h=j,j=[];++l<b;)h&&h[l].run();l=-1,b=j.length}h=null,k=!1,clearTimeout(a)}}
// v8 likes predictible objects
function f(a,b){this.fun=a,this.array=b}function g(){}
// shim for using process in browser
var h,i=b.exports={},j=[],k=!1,l=-1;i.nextTick=function(a){var b=new Array(arguments.length-1);if(arguments.length>1)for(var c=1;c<arguments.length;c++)b[c-1]=arguments[c];j.push(new f(a,b)),1!==j.length||k||setTimeout(e,0)},f.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",// empty string to avoid regexp issues
i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.binding=function(a){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(a){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},{}],38:[function(a,b,c){
// Top level file is just a mixin of submodules & constants
"use strict";var d=a("./lib/utils/common").assign,e=a("./lib/deflate"),f=a("./lib/inflate"),g=a("./lib/zlib/constants"),h={};d(h,e,f,g),b.exports=h},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(a,b,c){"use strict";/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate alrorythm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function d(a,b){var c=new u(b);
// That will never happens, if you don't cheat with options :)
if(c.push(a,!0),c.err)throw c.msg;return c.result}/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function e(a,b){return b=b||{},b.raw=!0,d(a,b)}/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function f(a,b){return b=b||{},b.gzip=!0,d(a,b)}var g=a("./zlib/deflate.js"),h=a("./utils/common"),i=a("./utils/strings"),j=a("./zlib/messages"),k=a("./zlib/zstream"),l=Object.prototype.toString,m=0,n=4,o=0,p=1,q=2,r=-1,s=0,t=8,u=function(a){this.options=h.assign({level:r,method:t,chunkSize:16384,windowBits:15,memLevel:8,strategy:s,to:""},a||{});var b=this.options;b.raw&&b.windowBits>0?b.windowBits=-b.windowBits:b.gzip&&b.windowBits>0&&b.windowBits<16&&(b.windowBits+=16),this.err=0,// error code, if happens (0 = Z_OK)
this.msg="",// error message
this.ended=!1,// used to avoid multiple onEnd() calls
this.chunks=[],// chunks of compressed data
this.strm=new k,this.strm.avail_out=0;var c=g.deflateInit2(this.strm,b.level,b.method,b.windowBits,b.memLevel,b.strategy);if(c!==o)throw new Error(j[c]);b.header&&g.deflateSetHeader(this.strm,b.header)};/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
u.prototype.push=function(a,b){var c,d,e=this.strm,f=this.options.chunkSize;if(this.ended)return!1;d=b===~~b?b:b===!0?n:m,"string"==typeof a?e.input=i.string2buf(a):"[object ArrayBuffer]"===l.call(a)?e.input=new Uint8Array(a):e.input=a,e.next_in=0,e.avail_in=e.input.length;do{/* no bad return value */
if(0===e.avail_out&&(e.output=new h.Buf8(f),e.next_out=0,e.avail_out=f),c=g.deflate(e,d),c!==p&&c!==o)return this.onEnd(c),this.ended=!0,!1;0!==e.avail_out&&(0!==e.avail_in||d!==n&&d!==q)||("string"===this.options.to?this.onData(i.buf2binstring(h.shrinkBuf(e.output,e.next_out))):this.onData(h.shrinkBuf(e.output,e.next_out)))}while((e.avail_in>0||0===e.avail_out)&&c!==p);
// Finalize on the last chunk.
// Finalize on the last chunk.
// callback interim results if Z_SYNC_FLUSH.
return d===n?(c=g.deflateEnd(this.strm),this.onEnd(c),this.ended=!0,c===o):d===q?(this.onEnd(o),e.avail_out=0,!0):!0},/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
u.prototype.onData=function(a){this.chunks.push(a)},/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
u.prototype.onEnd=function(a){
// On success - join
a===o&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=h.flattenChunks(this.chunks)),this.chunks=[],this.err=a,this.msg=this.strm.msg},c.Deflate=u,c.deflate=d,c.deflateRaw=e,c.gzip=f},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate.js":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(a,b,c){"use strict";/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function d(a,b){var c=new n(b);
// That will never happens, if you don't cheat with options :)
if(c.push(a,!0),c.err)throw c.msg;return c.result}/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function e(a,b){return b=b||{},b.raw=!0,d(a,b)}var f=a("./zlib/inflate.js"),g=a("./utils/common"),h=a("./utils/strings"),i=a("./zlib/constants"),j=a("./zlib/messages"),k=a("./zlib/zstream"),l=a("./zlib/gzheader"),m=Object.prototype.toString,n=function(a){this.options=g.assign({chunkSize:16384,windowBits:0,to:""},a||{});var b=this.options;
// Force window size for `raw` data, if not set directly,
// because we have no header for autodetect.
b.raw&&b.windowBits>=0&&b.windowBits<16&&(b.windowBits=-b.windowBits,0===b.windowBits&&(b.windowBits=-15)),
// If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
!(b.windowBits>=0&&b.windowBits<16)||a&&a.windowBits||(b.windowBits+=32),
// Gzip header has no info about windows size, we can do autodetect only
// for deflate. So, if window size not set, force it to max when gzip possible
b.windowBits>15&&b.windowBits<48&&0===(15&b.windowBits)&&(b.windowBits|=15),this.err=0,// error code, if happens (0 = Z_OK)
this.msg="",// error message
this.ended=!1,// used to avoid multiple onEnd() calls
this.chunks=[],// chunks of compressed data
this.strm=new k,this.strm.avail_out=0;var c=f.inflateInit2(this.strm,b.windowBits);if(c!==i.Z_OK)throw new Error(j[c]);this.header=new l,f.inflateGetHeader(this.strm,this.header)};/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
n.prototype.push=function(a,b){var c,d,e,j,k,l=this.strm,n=this.options.chunkSize,o=!1;if(this.ended)return!1;d=b===~~b?b:b===!0?i.Z_FINISH:i.Z_NO_FLUSH,"string"==typeof a?l.input=h.binstring2buf(a):"[object ArrayBuffer]"===m.call(a)?l.input=new Uint8Array(a):l.input=a,l.next_in=0,l.avail_in=l.input.length;do{if(0===l.avail_out&&(l.output=new g.Buf8(n),l.next_out=0,l.avail_out=n),c=f.inflate(l,i.Z_NO_FLUSH),c===i.Z_BUF_ERROR&&o===!0&&(c=i.Z_OK,o=!1),c!==i.Z_STREAM_END&&c!==i.Z_OK)return this.onEnd(c),this.ended=!0,!1;l.next_out&&(0!==l.avail_out&&c!==i.Z_STREAM_END&&(0!==l.avail_in||d!==i.Z_FINISH&&d!==i.Z_SYNC_FLUSH)||("string"===this.options.to?(e=h.utf8border(l.output,l.next_out),j=l.next_out-e,k=h.buf2string(l.output,e),l.next_out=j,l.avail_out=n-j,j&&g.arraySet(l.output,l.output,e,j,0),this.onData(k)):this.onData(g.shrinkBuf(l.output,l.next_out)))),0===l.avail_in&&0===l.avail_out&&(o=!0)}while((l.avail_in>0||0===l.avail_out)&&c!==i.Z_STREAM_END);
// Finalize on the last chunk.
// Finalize on the last chunk.
// callback interim results if Z_SYNC_FLUSH.
return c===i.Z_STREAM_END&&(d=i.Z_FINISH),d===i.Z_FINISH?(c=f.inflateEnd(this.strm),this.onEnd(c),this.ended=!0,c===i.Z_OK):d===i.Z_SYNC_FLUSH?(this.onEnd(i.Z_OK),l.avail_out=0,!0):!0},/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
n.prototype.onData=function(a){this.chunks.push(a)},/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
n.prototype.onEnd=function(a){
// On success - join
a===i.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=g.flattenChunks(this.chunks)),this.chunks=[],this.err=a,this.msg=this.strm.msg},/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/
c.Inflate=n,c.inflate=d,c.inflateRaw=e,c.ungzip=d},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate.js":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(a,b,c){"use strict";var d="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;c.assign=function(a){for(var b=Array.prototype.slice.call(arguments,1);b.length;){var c=b.shift();if(c){if("object"!=typeof c)throw new TypeError(c+"must be non-object");for(var d in c)c.hasOwnProperty(d)&&(a[d]=c[d])}}return a},
// reduce buffer size, avoiding mem copy
c.shrinkBuf=function(a,b){return a.length===b?a:a.subarray?a.subarray(0,b):(a.length=b,a)};var e={arraySet:function(a,b,c,d,e){if(b.subarray&&a.subarray)return void a.set(b.subarray(c,c+d),e);
// Fallback to ordinary array
for(var f=0;d>f;f++)a[e+f]=b[c+f]},
// Join array of chunks to single array.
flattenChunks:function(a){var b,c,d,e,f,g;for(d=0,b=0,c=a.length;c>b;b++)d+=a[b].length;for(g=new Uint8Array(d),e=0,b=0,c=a.length;c>b;b++)f=a[b],g.set(f,e),e+=f.length;return g}},f={arraySet:function(a,b,c,d,e){for(var f=0;d>f;f++)a[e+f]=b[c+f]},
// Join array of chunks to single array.
flattenChunks:function(a){return[].concat.apply([],a)}};
// Enable/Disable typed arrays use, for testing
//
c.setTyped=function(a){a?(c.Buf8=Uint8Array,c.Buf16=Uint16Array,c.Buf32=Int32Array,c.assign(c,e)):(c.Buf8=Array,c.Buf16=Array,c.Buf32=Array,c.assign(c,f))},c.setTyped(d)},{}],42:[function(a,b,c){
// String encode/decode helpers
"use strict";
// Helper (used in 2 places)
function d(a,b){
// use fallback for big arrays to avoid stack overflow
if(65537>b&&(a.subarray&&g||!a.subarray&&f))return String.fromCharCode.apply(null,e.shrinkBuf(a,b));for(var c="",d=0;b>d;d++)c+=String.fromCharCode(a[d]);return c}var e=a("./common"),f=!0,g=!0;try{String.fromCharCode.apply(null,[0])}catch(h){f=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(h){g=!1}for(var i=new e.Buf8(256),j=0;256>j;j++)i[j]=j>=252?6:j>=248?5:j>=240?4:j>=224?3:j>=192?2:1;i[254]=i[254]=1,// Invalid sequence start
// convert string to array (typed, when possible)
c.string2buf=function(a){var b,c,d,f,g,h=a.length,i=0;
// count binary size
for(f=0;h>f;f++)c=a.charCodeAt(f),55296===(64512&c)&&h>f+1&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),i+=128>c?1:2048>c?2:65536>c?3:4;
// convert
for(b=new e.Buf8(i),g=0,f=0;i>g;f++)c=a.charCodeAt(f),55296===(64512&c)&&h>f+1&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),128>c?b[g++]=c:2048>c?(b[g++]=192|c>>>6,b[g++]=128|63&c):65536>c?(b[g++]=224|c>>>12,b[g++]=128|c>>>6&63,b[g++]=128|63&c):(b[g++]=240|c>>>18,b[g++]=128|c>>>12&63,b[g++]=128|c>>>6&63,b[g++]=128|63&c);return b},
// Convert byte array to binary string
c.buf2binstring=function(a){return d(a,a.length)},
// Convert binary string (typed, when possible)
c.binstring2buf=function(a){for(var b=new e.Buf8(a.length),c=0,d=b.length;d>c;c++)b[c]=a.charCodeAt(c);return b},
// convert array to string
c.buf2string=function(a,b){var c,e,f,g,h=b||a.length,j=new Array(2*h);for(e=0,c=0;h>c;)
// quick process ascii
if(f=a[c++],128>f)j[e++]=f;else
// skip 5 & 6 byte codes
if(g=i[f],g>4)j[e++]=65533,c+=g-1;else{
// join the rest
for(
// apply mask on first byte
f&=2===g?31:3===g?15:7;g>1&&h>c;)f=f<<6|63&a[c++],g--;
// terminated by end of string?
g>1?j[e++]=65533:65536>f?j[e++]=f:(f-=65536,j[e++]=55296|f>>10&1023,j[e++]=56320|1023&f)}return d(j,e)},
// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
c.utf8border=function(a,b){var c;for(b=b||a.length,b>a.length&&(b=a.length),
// go back from last position, until start of sequence found
c=b-1;c>=0&&128===(192&a[c]);)c--;
// Fuckup - very small and broken sequence,
// return max, because we should return something anyway.
// Fuckup - very small and broken sequence,
// return max, because we should return something anyway.
// If we came to start of buffer - that means vuffer is too small,
// return max too.
return 0>c?b:0===c?b:c+i[a[c]]>b?c:b}},{"./common":41}],43:[function(a,b,c){"use strict";
// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.
function d(a,b,c,d){for(var e=65535&a|0,f=a>>>16&65535|0,g=0;0!==c;){
// Set limit ~ twice less than 5552, to keep
// s2 in 31-bits, because we force signed ints.
// in other case %= will fail.
g=c>2e3?2e3:c,c-=g;do e=e+b[d++]|0,f=f+e|0;while(--g);e%=65521,f%=65521}return e|f<<16|0}b.exports=d},{}],44:[function(a,b,c){b.exports={/* Allowed flush values; see deflate() and inflate() below for details */
Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,/* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,
//Z_MEM_ERROR:     -4,
Z_BUF_ERROR:-5,
//Z_VERSION_ERROR: -6,
/* compression levels */
Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,/* Possible values of the data_type field (though see inflate()) */
Z_BINARY:0,Z_TEXT:1,
//Z_ASCII:                1, // = Z_TEXT (deprecated)
Z_UNKNOWN:2,/* The deflate compression method */
Z_DEFLATED:8}},{}],45:[function(a,b,c){"use strict";
// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.
// Use ordinary array, since untyped makes no boost here
function d(){for(var a,b=[],c=0;256>c;c++){a=c;for(var d=0;8>d;d++)a=1&a?3988292384^a>>>1:a>>>1;b[c]=a}return b}function e(a,b,c,d){var e=f,g=d+c;a=-1^a;for(var h=d;g>h;h++)a=a>>>8^e[255&(a^b[h])];return-1^a}
// Create table on load. Just 255 signed longs. Not a problem.
var f=d();b.exports=e},{}],46:[function(a,b,c){"use strict";// Unix :) . Don't detect, use this default.
function d(a,b){return a.msg=G[b],b}function e(a){return(a<<1)-(a>4?9:0)}function f(a){for(var b=a.length;--b>=0;)a[b]=0}/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function g(a){var b=a.state,c=b.pending;c>a.avail_out&&(c=a.avail_out),0!==c&&(C.arraySet(a.output,b.pending_buf,b.pending_out,c,a.next_out),a.next_out+=c,b.pending_out+=c,a.total_out+=c,a.avail_out-=c,b.pending-=c,0===b.pending&&(b.pending_out=0))}function h(a,b){D._tr_flush_block(a,a.block_start>=0?a.block_start:-1,a.strstart-a.block_start,b),a.block_start=a.strstart,g(a.strm)}function i(a,b){a.pending_buf[a.pending++]=b}/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function j(a,b){
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
a.pending_buf[a.pending++]=b>>>8&255,a.pending_buf[a.pending++]=255&b}/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function k(a,b,c,d){var e=a.avail_in;return e>d&&(e=d),0===e?0:(a.avail_in-=e,C.arraySet(b,a.input,a.next_in,e,c),1===a.state.wrap?a.adler=E(a.adler,b,e,c):2===a.state.wrap&&(a.adler=F(a.adler,b,e,c)),a.next_in+=e,a.total_in+=e,e)}/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function l(a,b){var c,d,e=a.max_chain_length,f=a.strstart,g=a.prev_length,h=a.nice_match,i=a.strstart>a.w_size-ja?a.strstart-(a.w_size-ja):0,j=a.window,k=a.w_mask,l=a.prev,m=a.strstart+ia,n=j[f+g-1],o=j[f+g];/* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
// Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
/* Do not waste too much time if we already have a good match: */
a.prev_length>=a.good_match&&(e>>=2),/* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
h>a.lookahead&&(h=a.lookahead);
// Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
do/* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */
if(c=b,j[c+g]===o&&j[c+g-1]===n&&j[c]===j[f]&&j[++c]===j[f+1]){/* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
f+=2,c++;
// Assert(*scan == *match, "match[2]?");
/* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
do;while(j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&m>f);if(d=ia-(m-f),f=m-ia,d>g){if(a.match_start=b,g=d,d>=h)break;n=j[f+g-1],o=j[f+g]}}while((b=l[b&k])>i&&0!==--e);return g<=a.lookahead?g:a.lookahead}/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function m(a){var b,c,d,e,f,g=a.w_size;
//Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
do{
// JS ints have 32 bit, block below not needed
/* Deal with !@#$% 64K limit: */
//if (sizeof(int) <= 2) {
//    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
//        more = wsize;
//
//  } else if (more == (unsigned)(-1)) {
//        /* Very unlikely, but possible on 16 bit machine if
//         * strstart == 0 && lookahead == 1 (input done a byte at time)
//         */
//        more--;
//    }
//}
/* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
if(e=a.window_size-a.lookahead-a.strstart,a.strstart>=g+(g-ja)){C.arraySet(a.window,a.window,g,g,0),a.match_start-=g,a.strstart-=g,/* we now have strstart >= MAX_DIST */
a.block_start-=g,/* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */
c=a.hash_size,b=c;do d=a.head[--b],a.head[b]=d>=g?d-g:0;while(--c);c=g,b=c;do d=a.prev[--b],a.prev[b]=d>=g?d-g:0;while(--c);e+=g}if(0===a.strm.avail_in)break;/* Initialize the hash value now that we have some input: */
if(c=k(a.strm,a.window,a.strstart+a.lookahead,e),a.lookahead+=c,a.lookahead+a.insert>=ha)
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
for(f=a.strstart-a.insert,a.ins_h=a.window[f],/* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
a.ins_h=(a.ins_h<<a.hash_shift^a.window[f+1])&a.hash_mask;a.insert&&(/* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
a.ins_h=(a.ins_h<<a.hash_shift^a.window[f+ha-1])&a.hash_mask,a.prev[f&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=f,f++,a.insert--,!(a.lookahead+a.insert<ha)););}while(a.lookahead<ja&&0!==a.strm.avail_in)}/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function n(a,b){/* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
var c=65535;/* Copy as much as possible from input to output: */
for(c>a.pending_buf_size-5&&(c=a.pending_buf_size-5);;){/* Fill the window as much as possible: */
if(a.lookahead<=1){if(
//Assert(s->strstart < s->w_size+MAX_DIST(s) ||
//  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }
m(a),0===a.lookahead&&b===H)return sa;if(0===a.lookahead)break}
//Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");
a.strstart+=a.lookahead,a.lookahead=0;/* Emit a stored block if pending_buf will be full: */
var d=a.block_start+c;if((0===a.strstart||a.strstart>=d)&&(a.lookahead=a.strstart-d,a.strstart=d,h(a,!1),0===a.strm.avail_out))return sa;/* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
if(a.strstart-a.block_start>=a.w_size-ja&&(h(a,!1),0===a.strm.avail_out))return sa}/*** FLUSH_BLOCK(s, 1); ***/
/*** FLUSH_BLOCK(s, 0); ***/
return a.insert=0,b===K?(h(a,!0),0===a.strm.avail_out?ua:va):a.strstart>a.block_start&&(h(a,!1),0===a.strm.avail_out)?sa:sa}/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function o(a,b){/* set if current block must be flushed */
for(var c,d;;){/* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
if(a.lookahead<ja){if(m(a),a.lookahead<ja&&b===H)return sa;if(0===a.lookahead)break}if(c=0,a.lookahead>=ha&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ha-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart),0!==c&&a.strstart-c<=a.w_size-ja&&(a.match_length=l(a,c)),a.match_length>=ha)/* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
if(d=D._tr_tally(a,a.strstart-a.match_start,a.match_length-ha),a.lookahead-=a.match_length,a.match_length<=a.max_lazy_match&&a.lookahead>=ha){a.match_length--;/* string at strstart already in table */
do a.strstart++,/*** INSERT_STRING(s, s.strstart, hash_head); ***/
a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ha-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart;while(0!==--a.match_length);a.strstart++}else a.strstart+=a.match_length,a.match_length=0,a.ins_h=a.window[a.strstart],/* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+1])&a.hash_mask;else d=D._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++;if(d&&(/*** FLUSH_BLOCK(s, 0); ***/
h(a,!1),0===a.strm.avail_out))return sa}/*** FLUSH_BLOCK(s, 1); ***/
/*** FLUSH_BLOCK(s, 0); ***/
return a.insert=a.strstart<ha-1?a.strstart:ha-1,b===K?(h(a,!0),0===a.strm.avail_out?ua:va):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?sa:ta}/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function p(a,b){/* Process the input block. */
for(var c,d,e;;){/* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
if(a.lookahead<ja){if(m(a),a.lookahead<ja&&b===H)return sa;if(0===a.lookahead)break}/* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
if(c=0,a.lookahead>=ha&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ha-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart),a.prev_length=a.match_length,a.prev_match=a.match_start,a.match_length=ha-1,0!==c&&a.prev_length<a.max_lazy_match&&a.strstart-c<=a.w_size-ja&&(a.match_length=l(a,c),a.match_length<=5&&(a.strategy===S||a.match_length===ha&&a.strstart-a.match_start>4096)&&(a.match_length=ha-1)),a.prev_length>=ha&&a.match_length<=a.prev_length){e=a.strstart+a.lookahead-ha,/* Do not insert strings in hash table beyond this. */
//check_match(s, s.strstart-1, s.prev_match, s.prev_length);
/***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
d=D._tr_tally(a,a.strstart-1-a.prev_match,a.prev_length-ha),/* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
a.lookahead-=a.prev_length-1,a.prev_length-=2;do++a.strstart<=e&&(/*** INSERT_STRING(s, s.strstart, hash_head); ***/
a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ha-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart);while(0!==--a.prev_length);if(a.match_available=0,a.match_length=ha-1,a.strstart++,d&&(/*** FLUSH_BLOCK(s, 0); ***/
h(a,!1),0===a.strm.avail_out))return sa}else if(a.match_available){if(d=D._tr_tally(a,0,a.window[a.strstart-1]),d&&h(a,!1),a.strstart++,a.lookahead--,0===a.strm.avail_out)return sa}else/* There is no previous match to compare with, wait for
       * the next step to decide.
       */
a.match_available=1,a.strstart++,a.lookahead--}
//Assert (flush != Z_NO_FLUSH, "no flush?");
//Tracevv((stderr,"%c", s->window[s->strstart-1]));
/*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
/*** FLUSH_BLOCK(s, 1); ***/
/*** FLUSH_BLOCK(s, 0); ***/
return a.match_available&&(d=D._tr_tally(a,0,a.window[a.strstart-1]),a.match_available=0),a.insert=a.strstart<ha-1?a.strstart:ha-1,b===K?(h(a,!0),0===a.strm.avail_out?ua:va):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?sa:ta}/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function q(a,b){for(var c,d,e,f,g=a.window;;){/* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
if(a.lookahead<=ia){if(m(a),a.lookahead<=ia&&b===H)return sa;if(0===a.lookahead)break}if(/* See how many times the previous byte repeats */
a.match_length=0,a.lookahead>=ha&&a.strstart>0&&(e=a.strstart-1,d=g[e],d===g[++e]&&d===g[++e]&&d===g[++e])){f=a.strstart+ia;do;while(d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&f>e);a.match_length=ia-(f-e),a.match_length>a.lookahead&&(a.match_length=a.lookahead)}if(/* Emit match if have run of MIN_MATCH or longer, else emit literal */
a.match_length>=ha?(c=D._tr_tally(a,1,a.match_length-ha),a.lookahead-=a.match_length,a.strstart+=a.match_length,a.match_length=0):(c=D._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++),c&&(/*** FLUSH_BLOCK(s, 0); ***/
h(a,!1),0===a.strm.avail_out))return sa}/*** FLUSH_BLOCK(s, 1); ***/
/*** FLUSH_BLOCK(s, 0); ***/
return a.insert=0,b===K?(h(a,!0),0===a.strm.avail_out?ua:va):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?sa:ta}/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function r(a,b){/* set if current block must be flushed */
for(var c;;){/* Make sure that we have a literal to write. */
if(0===a.lookahead&&(m(a),0===a.lookahead)){if(b===H)return sa;break}if(/* Output a literal byte */
a.match_length=0,c=D._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++,c&&(h(a,!1),0===a.strm.avail_out))return sa}/*** FLUSH_BLOCK(s, 1); ***/
/*** FLUSH_BLOCK(s, 0); ***/
return a.insert=0,b===K?(h(a,!0),0===a.strm.avail_out?ua:va):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?sa:ta}/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function s(a){a.window_size=2*a.w_size,/*** CLEAR_HASH(s); ***/
f(a.head),// Fill with NIL (= 0);
/* Set the default configuration parameters:
   */
a.max_lazy_match=B[a.level].max_lazy,a.good_match=B[a.level].good_length,a.nice_match=B[a.level].nice_length,a.max_chain_length=B[a.level].max_chain,a.strstart=0,a.block_start=0,a.lookahead=0,a.insert=0,a.match_length=a.prev_length=ha-1,a.match_available=0,a.ins_h=0}function t(){this.strm=null,/* pointer back to this zlib stream */
this.status=0,/* as the name implies */
this.pending_buf=null,/* output still pending */
this.pending_buf_size=0,/* size of pending_buf */
this.pending_out=0,/* next pending byte to output to the stream */
this.pending=0,/* nb of bytes in the pending buffer */
this.wrap=0,/* bit 0 true for zlib, bit 1 true for gzip */
this.gzhead=null,/* gzip header information to write */
this.gzindex=0,/* where in extra, name, or comment */
this.method=Y,/* can only be DEFLATED */
this.last_flush=-1,/* value of flush param for previous deflate call */
this.w_size=0,/* LZ77 window size (32K by default) */
this.w_bits=0,/* log2(w_size)  (8..16) */
this.w_mask=0,/* w_size - 1 */
this.window=null,/* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */
this.window_size=0,/* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */
this.prev=null,/* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */
this.head=null,/* Heads of the hash chains or NIL. */
this.ins_h=0,/* hash index of string to be inserted */
this.hash_size=0,/* number of elements in hash table */
this.hash_bits=0,/* log2(hash_size) */
this.hash_mask=0,/* hash_size-1 */
this.hash_shift=0,/* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */
this.block_start=0,/* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */
this.match_length=0,/* length of best match */
this.prev_match=0,/* previous match */
this.match_available=0,/* set if previous match exists */
this.strstart=0,/* start of string to insert */
this.match_start=0,/* start of matching string */
this.lookahead=0,/* number of valid bytes ahead in window */
this.prev_length=0,/* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */
this.max_chain_length=0,/* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */
this.max_lazy_match=0,/* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
// That's alias to max_lazy_match, don't use directly
//this.max_insert_length = 0;
/* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */
this.level=0,/* compression level (1..9) */
this.strategy=0,/* favor or force Huffman coding*/
this.good_match=0,/* Use a faster search when the previous match is longer than this */
this.nice_match=0,/* Stop searching when current match exceeds this */
/* used by trees.c: */
/* Didn't use ct_data typedef below to suppress compiler warning */
// struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
// struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
// struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
// Use flat array of DOUBLE size, with interleaved fata,
// because JS does not support effective
this.dyn_ltree=new C.Buf16(2*fa),this.dyn_dtree=new C.Buf16(2*(2*da+1)),this.bl_tree=new C.Buf16(2*(2*ea+1)),f(this.dyn_ltree),f(this.dyn_dtree),f(this.bl_tree),this.l_desc=null,/* desc. for literal tree */
this.d_desc=null,/* desc. for distance tree */
this.bl_desc=null,/* desc. for bit length tree */
//ush bl_count[MAX_BITS+1];
this.bl_count=new C.Buf16(ga+1),/* number of codes at each bit length for an optimal tree */
//int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
this.heap=new C.Buf16(2*ca+1),/* heap used to build the Huffman trees */
f(this.heap),this.heap_len=0,/* number of elements in the heap */
this.heap_max=0,/* element of largest frequency */
/* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */
this.depth=new C.Buf16(2*ca+1),//uch depth[2*L_CODES+1];
f(this.depth),/* Depth of each subtree used as tie breaker for trees of equal frequency
   */
this.l_buf=0,/* buffer index for literals or lengths */
this.lit_bufsize=0,/* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */
this.last_lit=0,/* running index in l_buf */
this.d_buf=0,/* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */
this.opt_len=0,/* bit length of current block with optimal trees */
this.static_len=0,/* bit length of current block with static trees */
this.matches=0,/* number of string matches in current block */
this.insert=0,/* bytes at end of window left to insert */
this.bi_buf=0,/* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
this.bi_valid=0}function u(a){var b;// adler32(0, Z_NULL, 0)
return a&&a.state?(a.total_in=a.total_out=0,a.data_type=X,b=a.state,b.pending=0,b.pending_out=0,b.wrap<0&&(b.wrap=-b.wrap),b.status=b.wrap?la:qa,a.adler=2===b.wrap?0:1,b.last_flush=H,D._tr_init(b),M):d(a,O)}function v(a){var b=u(a);return b===M&&s(a.state),b}function w(a,b){return a&&a.state?2!==a.state.wrap?O:(a.state.gzhead=b,M):O}function x(a,b,c,e,f,g){if(!a)// === Z_NULL
return O;var h=1;if(b===R&&(b=6),0>e?(h=0,e=-e):e>15&&(h=2,e-=16),1>f||f>Z||c!==Y||8>e||e>15||0>b||b>9||0>g||g>V)return d(a,O);8===e&&(e=9);/* until 256-byte window bug fixed */
var i=new t;
// Don't need mem init magic for JS.
//s.high_water = 0;  /* nothing written to s->window yet */
/* 16K elements by default */
return a.state=i,i.strm=a,i.wrap=h,i.gzhead=null,i.w_bits=e,i.w_size=1<<i.w_bits,i.w_mask=i.w_size-1,i.hash_bits=f+7,i.hash_size=1<<i.hash_bits,i.hash_mask=i.hash_size-1,i.hash_shift=~~((i.hash_bits+ha-1)/ha),i.window=new C.Buf8(2*i.w_size),i.head=new C.Buf16(i.hash_size),i.prev=new C.Buf16(i.w_size),i.lit_bufsize=1<<f+6,i.pending_buf_size=4*i.lit_bufsize,i.pending_buf=new C.Buf8(i.pending_buf_size),i.d_buf=i.lit_bufsize>>1,i.l_buf=3*i.lit_bufsize,i.level=b,i.strategy=g,i.method=c,v(a)}function y(a,b){return x(a,b,Y,$,_,W)}function z(a,b){var c,h,k,l;// for gzip header write only
if(!a||!a.state||b>L||0>b)return a?d(a,O):O;if(h=a.state,!a.output||!a.input&&0!==a.avail_in||h.status===ra&&b!==K)return d(a,0===a.avail_out?Q:O);/* Write the header */
if(h.strm=a,c=h.last_flush,h.last_flush=b,h.status===la)if(2===h.wrap)// GZIP header
a.adler=0,//crc32(0L, Z_NULL, 0);
i(h,31),i(h,139),i(h,8),h.gzhead?(i(h,(h.gzhead.text?1:0)+(h.gzhead.hcrc?2:0)+(h.gzhead.extra?4:0)+(h.gzhead.name?8:0)+(h.gzhead.comment?16:0)),i(h,255&h.gzhead.time),i(h,h.gzhead.time>>8&255),i(h,h.gzhead.time>>16&255),i(h,h.gzhead.time>>24&255),i(h,9===h.level?2:h.strategy>=T||h.level<2?4:0),i(h,255&h.gzhead.os),h.gzhead.extra&&h.gzhead.extra.length&&(i(h,255&h.gzhead.extra.length),i(h,h.gzhead.extra.length>>8&255)),h.gzhead.hcrc&&(a.adler=F(a.adler,h.pending_buf,h.pending,0)),h.gzindex=0,h.status=ma):(// s->gzhead == Z_NULL
i(h,0),i(h,0),i(h,0),i(h,0),i(h,0),i(h,9===h.level?2:h.strategy>=T||h.level<2?4:0),i(h,wa),h.status=qa);else// DEFLATE header
{var m=Y+(h.w_bits-8<<4)<<8,n=-1;n=h.strategy>=T||h.level<2?0:h.level<6?1:6===h.level?2:3,m|=n<<6,0!==h.strstart&&(m|=ka),m+=31-m%31,h.status=qa,j(h,m),/* Save the adler32 of the preset dictionary: */
0!==h.strstart&&(j(h,a.adler>>>16),j(h,65535&a.adler)),a.adler=1}
//#ifdef GZIP
if(h.status===ma)if(h.gzhead.extra){/* start of bytes to update crc */
for(k=h.pending;h.gzindex<(65535&h.gzhead.extra.length)&&(h.pending!==h.pending_buf_size||(h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending!==h.pending_buf_size));)i(h,255&h.gzhead.extra[h.gzindex]),h.gzindex++;h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),h.gzindex===h.gzhead.extra.length&&(h.gzindex=0,h.status=na)}else h.status=na;if(h.status===na)if(h.gzhead.name){k=h.pending;/* start of bytes to update crc */
//int val;
do{if(h.pending===h.pending_buf_size&&(h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending===h.pending_buf_size)){l=1;break}
// JS specific: little magic to add zero terminator to end of string
l=h.gzindex<h.gzhead.name.length?255&h.gzhead.name.charCodeAt(h.gzindex++):0,i(h,l)}while(0!==l);h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),0===l&&(h.gzindex=0,h.status=oa)}else h.status=oa;if(h.status===oa)if(h.gzhead.comment){k=h.pending;/* start of bytes to update crc */
//int val;
do{if(h.pending===h.pending_buf_size&&(h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending===h.pending_buf_size)){l=1;break}
// JS specific: little magic to add zero terminator to end of string
l=h.gzindex<h.gzhead.comment.length?255&h.gzhead.comment.charCodeAt(h.gzindex++):0,i(h,l)}while(0!==l);h.gzhead.hcrc&&h.pending>k&&(a.adler=F(a.adler,h.pending_buf,h.pending-k,k)),0===l&&(h.status=pa)}else h.status=pa;
//#endif
/* Flush as much pending output as possible */
if(h.status===pa&&(h.gzhead.hcrc?(h.pending+2>h.pending_buf_size&&g(a),h.pending+2<=h.pending_buf_size&&(i(h,255&a.adler),i(h,a.adler>>8&255),a.adler=0,//crc32(0L, Z_NULL, 0);
h.status=qa)):h.status=qa),0!==h.pending){if(g(a),0===a.avail_out)/* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
return h.last_flush=-1,M}else if(0===a.avail_in&&e(b)<=e(c)&&b!==K)return d(a,Q);/* User must not provide more input after the first FINISH: */
if(h.status===ra&&0!==a.avail_in)return d(a,Q);/* Start a new block or continue the current one.
   */
if(0!==a.avail_in||0!==h.lookahead||b!==H&&h.status!==ra){var o=h.strategy===T?r(h,b):h.strategy===U?q(h,b):B[h.level].func(h,b);if(o!==ua&&o!==va||(h.status=ra),o===sa||o===ua)return 0===a.avail_out&&(h.last_flush=-1),M;if(o===ta&&(b===I?D._tr_align(h):b!==L&&(D._tr_stored_block(h,0,0,!1),b===J&&(f(h.head),0===h.lookahead&&(h.strstart=0,h.block_start=0,h.insert=0))),g(a),0===a.avail_out))/* avoid BUF_ERROR at next call, see above */
return h.last_flush=-1,M}
//Assert(strm->avail_out > 0, "bug2");
//if (strm.avail_out <= 0) { throw new Error("bug2");}
//Assert(strm->avail_out > 0, "bug2");
//if (strm.avail_out <= 0) { throw new Error("bug2");}
/* Write the trailer */
/* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
return b!==K?M:h.wrap<=0?N:(2===h.wrap?(i(h,255&a.adler),i(h,a.adler>>8&255),i(h,a.adler>>16&255),i(h,a.adler>>24&255),i(h,255&a.total_in),i(h,a.total_in>>8&255),i(h,a.total_in>>16&255),i(h,a.total_in>>24&255)):(j(h,a.adler>>>16),j(h,65535&a.adler)),g(a),h.wrap>0&&(h.wrap=-h.wrap),0!==h.pending?M:N)}function A(a){var b;return a&&a.state?(b=a.state.status,b!==la&&b!==ma&&b!==na&&b!==oa&&b!==pa&&b!==qa&&b!==ra?d(a,O):(a.state=null,b===qa?d(a,P):M)):O}var B,C=a("../utils/common"),D=a("./trees"),E=a("./adler32"),F=a("./crc32"),G=a("./messages"),H=0,I=1,J=3,K=4,L=5,M=0,N=1,O=-2,P=-3,Q=-5,R=-1,S=1,T=2,U=3,V=4,W=0,X=2,Y=8,Z=9,$=15,_=8,aa=29,ba=256,ca=ba+1+aa,da=30,ea=19,fa=2*ca+1,ga=15,ha=3,ia=258,ja=ia+ha+1,ka=32,la=42,ma=69,na=73,oa=91,pa=103,qa=113,ra=666,sa=1,ta=2,ua=3,va=4,wa=3,xa=function(a,b,c,d,e){this.good_length=a,this.max_lazy=b,this.nice_length=c,this.max_chain=d,this.func=e};B=[/*      good lazy nice chain */
new xa(0,0,0,0,n),/* 0 store only */
new xa(4,4,8,4,o),/* 1 max speed, no lazy matches */
new xa(4,5,16,8,o),/* 2 */
new xa(4,6,32,32,o),/* 3 */
new xa(4,4,16,16,p),/* 4 lazy matches */
new xa(8,16,32,32,p),/* 5 */
new xa(8,16,128,128,p),/* 6 */
new xa(8,32,128,256,p),/* 7 */
new xa(32,128,258,1024,p),/* 8 */
new xa(32,258,258,4096,p)],c.deflateInit=y,c.deflateInit2=x,c.deflateReset=v,c.deflateResetKeep=u,c.deflateSetHeader=w,c.deflate=z,c.deflateEnd=A,c.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(a,b,c){"use strict";function d(){/* true if compressed data believed to be text */
this.text=0,/* modification time */
this.time=0,/* extra flags (not used when writing a gzip file) */
this.xflags=0,/* operating system */
this.os=0,/* pointer to extra field or Z_NULL if none */
this.extra=null,/* extra field length (valid if extra != Z_NULL) */
this.extra_len=0,// Actually, we don't need it in JS,
// but leave for few code modifications
//
// Setup limits is not necessary because in js we should not preallocate memory
// for inflate use constant limit in 65536 bytes
//
/* space at extra (only when reading header) */
// this.extra_max  = 0;
/* pointer to zero-terminated file name or Z_NULL */
this.name="",/* space at name (only when reading header) */
// this.name_max   = 0;
/* pointer to zero-terminated comment or Z_NULL */
this.comment="",/* space at comment (only when reading header) */
// this.comm_max   = 0;
/* true if there was or will be a header crc */
this.hcrc=0,/* true when done reading gzip header (not used when writing a gzip file) */
this.done=!1}b.exports=d},{}],48:[function(a,b,c){"use strict";
// See state defs from inflate.js
var d=30,e=12;/* i: waiting for type bits, including last-flag bit */
/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
b.exports=function(a,b){var c,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C;c=a.state,f=a.next_in,B=a.input,g=f+(a.avail_in-5),h=a.next_out,C=a.output,i=h-(b-a.avail_out),j=h+(a.avail_out-257),k=c.dmax,l=c.wsize,m=c.whave,n=c.wnext,o=c.window,p=c.hold,q=c.bits,r=c.lencode,s=c.distcode,t=(1<<c.lenbits)-1,u=(1<<c.distbits)-1;/* decode literals and length/distances until end-of-block or not enough
     input data or output space */
a:do{15>q&&(p+=B[f++]<<q,q+=8,p+=B[f++]<<q,q+=8),v=r[p&t];b:for(;;){if(w=v>>>24,p>>>=w,q-=w,w=v>>>16&255,0===w)/* literal */
//Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
//        "inflate:         literal '%c'\n" :
//        "inflate:         literal 0x%02x\n", here.val));
C[h++]=65535&v;else{if(!(16&w)){if(0===(64&w)){/* 2nd level length code */
v=r[(65535&v)+(p&(1<<w)-1)];continue b}if(32&w){/* end-of-block */
//Tracevv((stderr, "inflate:         end of block\n"));
c.mode=e;break a}a.msg="invalid literal/length code",c.mode=d;break a}/* length base */
x=65535&v,w&=15,/* number of extra bits */
w&&(w>q&&(p+=B[f++]<<q,q+=8),x+=p&(1<<w)-1,p>>>=w,q-=w),
//Tracevv((stderr, "inflate:         length %u\n", len));
15>q&&(p+=B[f++]<<q,q+=8,p+=B[f++]<<q,q+=8),v=s[p&u];c:for(;;){if(w=v>>>24,p>>>=w,q-=w,w=v>>>16&255,!(16&w)){if(0===(64&w)){/* 2nd level distance code */
v=s[(65535&v)+(p&(1<<w)-1)];continue c}a.msg="invalid distance code",c.mode=d;break a}
//#ifdef INFLATE_STRICT
if(y=65535&v,w&=15,w>q&&(p+=B[f++]<<q,q+=8,w>q&&(p+=B[f++]<<q,q+=8)),y+=p&(1<<w)-1,y>k){a.msg="invalid distance too far back",c.mode=d;break a}/* max distance in output */
if(p>>>=w,q-=w,w=h-i,y>w){/* distance back in window */
if(w=y-w,w>m&&c.sane){a.msg="invalid distance too far back",c.mode=d;break a}if(z=0,A=o,0===n){if(z+=l-w,x>w){/* some from window */
x-=w;do C[h++]=o[z++];while(--w);z=h-y,/* rest from output */
A=C}}else if(w>n){if(z+=l+n-w,w-=n,x>w){/* some from end of window */
x-=w;do C[h++]=o[z++];while(--w);if(z=0,x>n){/* some from start of window */
w=n,x-=w;do C[h++]=o[z++];while(--w);z=h-y,/* rest from output */
A=C}}}else if(z+=n-w,x>w){/* some from window */
x-=w;do C[h++]=o[z++];while(--w);z=h-y,/* rest from output */
A=C}for(;x>2;)C[h++]=A[z++],C[h++]=A[z++],C[h++]=A[z++],x-=3;x&&(C[h++]=A[z++],x>1&&(C[h++]=A[z++]))}else{z=h-y;/* copy direct from output */
do/* minimum length is three */
C[h++]=C[z++],C[h++]=C[z++],C[h++]=C[z++],x-=3;while(x>2);x&&(C[h++]=C[z++],x>1&&(C[h++]=C[z++]))}break}}break}}while(g>f&&j>h);x=q>>3,f-=x,q-=x<<3,p&=(1<<q)-1,a.next_in=f,a.next_out=h,a.avail_in=g>f?5+(g-f):5-(f-g),a.avail_out=j>h?257+(j-h):257-(h-j),c.hold=p,c.bits=q}},{}],49:[function(a,b,c){"use strict";function d(a){return(a>>>24&255)+(a>>>8&65280)+((65280&a)<<8)+((255&a)<<24)}function e(){this.mode=0,/* current inflate mode */
this.last=!1,/* true if processing last block */
this.wrap=0,/* bit 0 true for zlib, bit 1 true for gzip */
this.havedict=!1,/* true if dictionary provided */
this.flags=0,/* gzip header method and flags (0 if zlib) */
this.dmax=0,/* zlib header max distance (INFLATE_STRICT) */
this.check=0,/* protected copy of check value */
this.total=0,/* protected copy of output count */
// TODO: may be {}
this.head=null,/* where to save gzip header information */
/* sliding window */
this.wbits=0,/* log base 2 of requested window size */
this.wsize=0,/* window size or zero if not using window */
this.whave=0,/* valid bytes in the window */
this.wnext=0,/* window write index */
this.window=null,/* allocated sliding window, if needed */
/* bit accumulator */
this.hold=0,/* input bit accumulator */
this.bits=0,/* number of bits in "in" */
/* for string and stored block copying */
this.length=0,/* literal or length of data to copy */
this.offset=0,/* distance back to copy string from */
/* for table and code decoding */
this.extra=0,/* extra bits needed */
/* fixed and dynamic code tables */
this.lencode=null,/* starting table for length/literal codes */
this.distcode=null,/* starting table for distance codes */
this.lenbits=0,/* index bits for lencode */
this.distbits=0,/* index bits for distcode */
/* dynamic table building */
this.ncode=0,/* number of code length code lengths */
this.nlen=0,/* number of length code lengths */
this.ndist=0,/* number of distance code lengths */
this.have=0,/* number of code lengths in lens[] */
this.next=null,/* next available space in codes[] */
this.lens=new r.Buf16(320),/* temporary storage for code lengths */
this.work=new r.Buf16(288),/* work area for code table building */
/*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
//this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
this.lendyn=null,/* dynamic table for length/literal codes (JS specific) */
this.distdyn=null,/* dynamic table for distance codes (JS specific) */
this.sane=0,/* if false, allow invalid distance too far */
this.back=0,/* bits back of last unprocessed length/lit */
this.was=0}function f(a){var b;/*Z_NULL*/
/* to support ill-conceived Java test suite */
//state.lencode = state.distcode = state.next = state.codes;
return a&&a.state?(b=a.state,a.total_in=a.total_out=b.total=0,a.msg="",b.wrap&&(a.adler=1&b.wrap),b.mode=K,b.last=0,b.havedict=0,b.dmax=32768,b.head=null,b.hold=0,b.bits=0,b.lencode=b.lendyn=new r.Buf32(oa),b.distcode=b.distdyn=new r.Buf32(pa),b.sane=1,b.back=-1,C):F}function g(a){var b;return a&&a.state?(b=a.state,b.wsize=0,b.whave=0,b.wnext=0,f(a)):F}function h(a,b){var c,d;/* get the state */
/* get the state */
/* extract wrap request from windowBits parameter */
/* set number of window bits, free window if different */
/* update state and reset the rest of it */
return a&&a.state?(d=a.state,0>b?(c=0,b=-b):(c=(b>>4)+1,48>b&&(b&=15)),b&&(8>b||b>15)?F:(null!==d.window&&d.wbits!==b&&(d.window=null),d.wrap=c,d.wbits=b,g(a))):F}function i(a,b){var c,d;
//strm.msg = Z_NULL;                 /* in case we return an error */
//if (state === Z_NULL) return Z_MEM_ERROR;
//Tracev((stderr, "inflate: allocated\n"));
return a?(d=new e,a.state=d,d.window=null,c=h(a,b),c!==C&&(a.state=null),c):F}function j(a){return i(a,ra)}// We have no pointers in JS, so keep tables separate
function k(a){/* build fixed huffman tables if first call (may not be thread safe) */
if(sa){var b;for(p=new r.Buf32(512),q=new r.Buf32(32),/* literal/length table */
b=0;144>b;)a.lens[b++]=8;for(;256>b;)a.lens[b++]=9;for(;280>b;)a.lens[b++]=7;for(;288>b;)a.lens[b++]=8;for(v(x,a.lens,0,288,p,0,a.work,{bits:9}),/* distance table */
b=0;32>b;)a.lens[b++]=5;v(y,a.lens,0,32,q,0,a.work,{bits:5}),/* do this just once */
sa=!1}a.lencode=p,a.lenbits=9,a.distcode=q,a.distbits=5}/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function l(a,b,c,d){var e,f=a.state;/* if it hasn't been done already, allocate space for the window */
/* copy state->wsize or less output bytes into the circular window */
//zmemcpy(state->window + state->wnext, end - copy, dist);
//zmemcpy(state->window, end - copy, copy);
return null===f.window&&(f.wsize=1<<f.wbits,f.wnext=0,f.whave=0,f.window=new r.Buf8(f.wsize)),d>=f.wsize?(r.arraySet(f.window,b,c-f.wsize,f.wsize,0),f.wnext=0,f.whave=f.wsize):(e=f.wsize-f.wnext,e>d&&(e=d),r.arraySet(f.window,b,c-d,e,f.wnext),d-=e,d?(r.arraySet(f.window,b,c-d,d,0),f.wnext=d,f.whave=f.wsize):(f.wnext+=e,f.wnext===f.wsize&&(f.wnext=0),f.whave<f.wsize&&(f.whave+=e))),0}function m(a,b){var c,e,f,g,h,i,j,m,n,o,p,q,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,Aa=0,Ba=new r.Buf8(4),Ca=/* permutation of code lengths */
[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!a||!a.state||!a.output||!a.input&&0!==a.avail_in)return F;c=a.state,c.mode===V&&(c.mode=W),h=a.next_out,f=a.output,j=a.avail_out,g=a.next_in,e=a.input,i=a.avail_in,m=c.hold,n=c.bits,o=i,p=j,xa=C;a:// goto emulation
for(;;)switch(c.mode){case K:if(0===c.wrap){c.mode=W;break}
//=== NEEDBITS(16);
for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//===//
if(2&c.wrap&&35615===m){/* gzip header */
c.check=0,
//=== CRC2(state.check, hold);
Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=t(c.check,Ba,2,0),
//===//
//=== INITBITS();
m=0,n=0,
//===//
c.mode=L;break}if(c.flags=0,/* expect zlib header */
c.head&&(c.head.done=!1),!(1&c.wrap)||(((255&m)<<8)+(m>>8))%31){a.msg="incorrect header check",c.mode=la;break}if((15&m)!==J){a.msg="unknown compression method",c.mode=la;break}if(m>>>=4,n-=4,wa=(15&m)+8,0===c.wbits)c.wbits=wa;else if(wa>c.wbits){a.msg="invalid window size",c.mode=la;break}c.dmax=1<<wa,
//Tracev((stderr, "inflate:   zlib header ok\n"));
a.adler=c.check=1,c.mode=512&m?T:V,
//=== INITBITS();
m=0,n=0;
//===//
break;case L:
//=== NEEDBITS(16); */
for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(
//===//
c.flags=m,(255&c.flags)!==J){a.msg="unknown compression method",c.mode=la;break}if(57344&c.flags){a.msg="unknown header flags set",c.mode=la;break}c.head&&(c.head.text=m>>8&1),512&c.flags&&(
//=== CRC2(state.check, hold);
Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=t(c.check,Ba,2,0)),
//=== INITBITS();
m=0,n=0,
//===//
c.mode=M;/* falls through */
case M:
//=== NEEDBITS(32); */
for(;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//===//
c.head&&(c.head.time=m),512&c.flags&&(
//=== CRC4(state.check, hold)
Ba[0]=255&m,Ba[1]=m>>>8&255,Ba[2]=m>>>16&255,Ba[3]=m>>>24&255,c.check=t(c.check,Ba,4,0)),
//=== INITBITS();
m=0,n=0,
//===//
c.mode=N;/* falls through */
case N:
//=== NEEDBITS(16); */
for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//===//
c.head&&(c.head.xflags=255&m,c.head.os=m>>8),512&c.flags&&(
//=== CRC2(state.check, hold);
Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=t(c.check,Ba,2,0)),
//=== INITBITS();
m=0,n=0,
//===//
c.mode=O;/* falls through */
case O:if(1024&c.flags){
//=== NEEDBITS(16); */
for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//===//
c.length=m,c.head&&(c.head.extra_len=m),512&c.flags&&(
//=== CRC2(state.check, hold);
Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=t(c.check,Ba,2,0)),
//=== INITBITS();
m=0,n=0}else c.head&&(c.head.extra=null);c.mode=P;/* falls through */
case P:if(1024&c.flags&&(q=c.length,q>i&&(q=i),q&&(c.head&&(wa=c.head.extra_len-c.length,c.head.extra||(c.head.extra=new Array(c.head.extra_len)),r.arraySet(c.head.extra,e,g,q,wa)),512&c.flags&&(c.check=t(c.check,e,q,g)),i-=q,g+=q,c.length-=q),c.length))break a;c.length=0,c.mode=Q;/* falls through */
case Q:if(2048&c.flags){if(0===i)break a;q=0;do wa=e[g+q++],c.head&&wa&&c.length<65536&&(c.head.name+=String.fromCharCode(wa));while(wa&&i>q);if(512&c.flags&&(c.check=t(c.check,e,q,g)),i-=q,g+=q,wa)break a}else c.head&&(c.head.name=null);c.length=0,c.mode=R;/* falls through */
case R:if(4096&c.flags){if(0===i)break a;q=0;do wa=e[g+q++],c.head&&wa&&c.length<65536&&(c.head.comment+=String.fromCharCode(wa));while(wa&&i>q);if(512&c.flags&&(c.check=t(c.check,e,q,g)),i-=q,g+=q,wa)break a}else c.head&&(c.head.comment=null);c.mode=S;/* falls through */
case S:if(512&c.flags){
//=== NEEDBITS(16); */
for(;16>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//===//
if(m!==(65535&c.check)){a.msg="header crc mismatch",c.mode=la;break}
//=== INITBITS();
m=0,n=0}c.head&&(c.head.hcrc=c.flags>>9&1,c.head.done=!0),a.adler=c.check=0,c.mode=V;break;case T:
//=== NEEDBITS(32); */
for(;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//===//
a.adler=c.check=d(m),
//=== INITBITS();
m=0,n=0,
//===//
c.mode=U;/* falls through */
case U:if(0===c.havedict)
//---
//--- RESTORE() ---
return a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,E;a.adler=c.check=1,c.mode=V;/* falls through */
case V:if(b===A||b===B)break a;/* falls through */
case W:if(c.last){
//--- BYTEBITS() ---//
m>>>=7&n,n-=7&n,
//---//
c.mode=ia;break}
//=== NEEDBITS(3); */
for(;3>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//---//
switch(
//===//
c.last=1&m,m>>>=1,n-=1,3&m){case 0:/* stored block */
//Tracev((stderr, "inflate:     stored block%s\n",
//        state.last ? " (last)" : ""));
c.mode=X;break;case 1:/* decode codes */
if(/* fixed block */
k(c),
//Tracev((stderr, "inflate:     fixed codes block%s\n",
//        state.last ? " (last)" : ""));
c.mode=ba,b===B){
//--- DROPBITS(2) ---//
m>>>=2,n-=2;
//---//
break a}break;case 2:/* dynamic block */
//Tracev((stderr, "inflate:     dynamic codes block%s\n",
//        state.last ? " (last)" : ""));
c.mode=$;break;case 3:a.msg="invalid block type",c.mode=la}
//--- DROPBITS(2) ---//
m>>>=2,n-=2;
//---//
break;case X:
//---//
//=== NEEDBITS(32); */
for(
//--- BYTEBITS() ---// /* go to byte boundary */
m>>>=7&n,n-=7&n;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//===//
if((65535&m)!==(m>>>16^65535)){a.msg="invalid stored block lengths",c.mode=la;break}if(c.length=65535&m,m=0,n=0,c.mode=Y,b===B)break a;/* falls through */
case Y:c.mode=Z;/* falls through */
case Z:if(q=c.length){if(q>i&&(q=i),q>j&&(q=j),0===q)break a;
//--- zmemcpy(put, next, copy); ---
r.arraySet(f,e,g,q,h),
//---//
i-=q,g+=q,j-=q,h+=q,c.length-=q;break}
//Tracev((stderr, "inflate:       stored end\n"));
c.mode=V;break;case $:
//=== NEEDBITS(14); */
for(;14>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//---//
//#ifndef PKZIP_BUG_WORKAROUND
if(
//===//
c.nlen=(31&m)+257,m>>>=5,n-=5,c.ndist=(31&m)+1,m>>>=5,n-=5,c.ncode=(15&m)+4,m>>>=4,n-=4,c.nlen>286||c.ndist>30){a.msg="too many length or distance symbols",c.mode=la;break}
//#endif
//Tracev((stderr, "inflate:       table sizes ok\n"));
c.have=0,c.mode=_;/* falls through */
case _:for(;c.have<c.ncode;){
//=== NEEDBITS(3);
for(;3>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//===//
c.lens[Ca[c.have++]]=7&m,//BITS(3);
//--- DROPBITS(3) ---//
m>>>=3,n-=3}for(;c.have<19;)c.lens[Ca[c.have++]]=0;if(
// We have separate tables & no pointers. 2 commented lines below not needed.
//state.next = state.codes;
//state.lencode = state.next;
// Switch to use dynamic table
c.lencode=c.lendyn,c.lenbits=7,ya={bits:c.lenbits},xa=v(w,c.lens,0,19,c.lencode,0,c.work,ya),c.lenbits=ya.bits,xa){a.msg="invalid code lengths set",c.mode=la;break}
//Tracev((stderr, "inflate:       code lengths ok\n"));
c.have=0,c.mode=aa;/* falls through */
case aa:for(;c.have<c.nlen+c.ndist;){for(;Aa=c.lencode[m&(1<<c.lenbits)-1],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(n>=qa);){
//--- PULLBYTE() ---//
if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(16>sa)m>>>=qa,n-=qa,c.lens[c.have++]=sa;else{if(16===sa){for(
//=== NEEDBITS(here.bits + 2);
za=qa+2;za>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//---//
if(m>>>=qa,n-=qa,0===c.have){a.msg="invalid bit length repeat",c.mode=la;break}wa=c.lens[c.have-1],q=3+(3&m),//BITS(2);
//--- DROPBITS(2) ---//
m>>>=2,n-=2}else if(17===sa){for(
//=== NEEDBITS(here.bits + 3);
za=qa+3;za>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//===//
//--- DROPBITS(here.bits) ---//
m>>>=qa,n-=qa,
//---//
wa=0,q=3+(7&m),//BITS(3);
//--- DROPBITS(3) ---//
m>>>=3,n-=3}else{for(
//=== NEEDBITS(here.bits + 7);
za=qa+7;za>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//===//
//--- DROPBITS(here.bits) ---//
m>>>=qa,n-=qa,
//---//
wa=0,q=11+(127&m),//BITS(7);
//--- DROPBITS(7) ---//
m>>>=7,n-=7}if(c.have+q>c.nlen+c.ndist){a.msg="invalid bit length repeat",c.mode=la;break}for(;q--;)c.lens[c.have++]=wa}}/* handle error breaks in while */
if(c.mode===la)break;/* check for end-of-block code (better have one) */
if(0===c.lens[256]){a.msg="invalid code -- missing end-of-block",c.mode=la;break}
// state.lencode = state.next;
if(/* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
c.lenbits=9,ya={bits:c.lenbits},xa=v(x,c.lens,0,c.nlen,c.lencode,0,c.work,ya),c.lenbits=ya.bits,xa){a.msg="invalid literal/lengths set",c.mode=la;break}
// state.distcode = state.next;
if(c.distbits=6,
//state.distcode.copy(state.codes);
// Switch to use dynamic table
c.distcode=c.distdyn,ya={bits:c.distbits},xa=v(y,c.lens,c.nlen,c.ndist,c.distcode,0,c.work,ya),c.distbits=ya.bits,xa){a.msg="invalid distances set",c.mode=la;break}if(
//Tracev((stderr, 'inflate:       codes ok\n'));
c.mode=ba,b===B)break a;/* falls through */
case ba:c.mode=ca;/* falls through */
case ca:if(i>=6&&j>=258){
//--- RESTORE() ---
a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,
//---
u(a,p),
//--- LOAD() ---
h=a.next_out,f=a.output,j=a.avail_out,g=a.next_in,e=a.input,i=a.avail_in,m=c.hold,n=c.bits,
//---
c.mode===V&&(c.back=-1);break}for(c.back=0;Aa=c.lencode[m&(1<<c.lenbits)-1],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(n>=qa);){
//--- PULLBYTE() ---//
if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(ra&&0===(240&ra)){for(ta=qa,ua=ra,va=sa;Aa=c.lencode[va+((m&(1<<ta+ua)-1)>>ta)],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(n>=ta+qa);){
//--- PULLBYTE() ---//
if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//--- DROPBITS(last.bits) ---//
m>>>=ta,n-=ta,
//---//
c.back+=ta}if(m>>>=qa,n-=qa,c.back+=qa,c.length=sa,0===ra){
//Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
//        "inflate:         literal '%c'\n" :
//        "inflate:         literal 0x%02x\n", here.val));
c.mode=ha;break}if(32&ra){
//Tracevv((stderr, "inflate:         end of block\n"));
c.back=-1,c.mode=V;break}if(64&ra){a.msg="invalid literal/length code",c.mode=la;break}c.extra=15&ra,c.mode=da;/* falls through */
case da:if(c.extra){for(
//=== NEEDBITS(state.extra);
za=c.extra;za>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//===//
c.length+=m&(1<<c.extra)-1,
//--- DROPBITS(state.extra) ---//
m>>>=c.extra,n-=c.extra,
//---//
c.back+=c.extra}
//Tracevv((stderr, "inflate:         length %u\n", state.length));
c.was=c.length,c.mode=ea;/* falls through */
case ea:for(;Aa=c.distcode[m&(1<<c.distbits)-1],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(n>=qa);){
//--- PULLBYTE() ---//
if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(0===(240&ra)){for(ta=qa,ua=ra,va=sa;Aa=c.distcode[va+((m&(1<<ta+ua)-1)>>ta)],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(n>=ta+qa);){
//--- PULLBYTE() ---//
if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//--- DROPBITS(last.bits) ---//
m>>>=ta,n-=ta,
//---//
c.back+=ta}if(m>>>=qa,n-=qa,c.back+=qa,64&ra){a.msg="invalid distance code",c.mode=la;break}c.offset=sa,c.extra=15&ra,c.mode=fa;/* falls through */
case fa:if(c.extra){for(
//=== NEEDBITS(state.extra);
za=c.extra;za>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//===//
c.offset+=m&(1<<c.extra)-1,
//--- DROPBITS(state.extra) ---//
m>>>=c.extra,n-=c.extra,
//---//
c.back+=c.extra}
//#ifdef INFLATE_STRICT
if(c.offset>c.dmax){a.msg="invalid distance too far back",c.mode=la;break}
//#endif
//Tracevv((stderr, "inflate:         distance %u\n", state.offset));
c.mode=ga;/* falls through */
case ga:if(0===j)break a;if(q=p-j,c.offset>q){if(q=c.offset-q,q>c.whave&&c.sane){a.msg="invalid distance too far back",c.mode=la;break}q>c.wnext?(q-=c.wnext,oa=c.wsize-q):oa=c.wnext-q,q>c.length&&(q=c.length),pa=c.window}else pa=f,oa=h-c.offset,q=c.length;q>j&&(q=j),j-=q,c.length-=q;do f[h++]=pa[oa++];while(--q);0===c.length&&(c.mode=ca);break;case ha:if(0===j)break a;f[h++]=c.length,j--,c.mode=ca;break;case ia:if(c.wrap){
//=== NEEDBITS(32);
for(;32>n;){if(0===i)break a;i--,
// Use '|' insdead of '+' to make sure that result is signed
m|=e[g++]<<n,n+=8}
// NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too
if(p-=j,a.total_out+=p,c.total+=p,p&&(a.adler=c.check=c.flags?t(c.check,f,p,h-p):s(c.check,f,p,h-p)),p=j,(c.flags?m:d(m))!==c.check){a.msg="incorrect data check",c.mode=la;break}
//=== INITBITS();
m=0,n=0}c.mode=ja;/* falls through */
case ja:if(c.wrap&&c.flags){
//=== NEEDBITS(32);
for(;32>n;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}
//===//
if(m!==(4294967295&c.total)){a.msg="incorrect length check",c.mode=la;break}
//=== INITBITS();
m=0,n=0}c.mode=ka;/* falls through */
case ka:xa=D;break a;case la:xa=G;break a;case ma:return H;case na:/* falls through */
default:return F}
//---
// inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"
/*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */
//--- RESTORE() ---
//---
/*UPDATE(state.check, strm.next_out - _out, _out);*/
return a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,(c.wsize||p!==a.avail_out&&c.mode<la&&(c.mode<ia||b!==z))&&l(a,a.output,a.next_out,p-a.avail_out)?(c.mode=ma,H):(o-=a.avail_in,p-=a.avail_out,a.total_in+=o,a.total_out+=p,c.total+=p,c.wrap&&p&&(a.adler=c.check=c.flags?t(c.check,f,p,a.next_out-p):s(c.check,f,p,a.next_out-p)),a.data_type=c.bits+(c.last?64:0)+(c.mode===V?128:0)+(c.mode===ba||c.mode===Y?256:0),(0===o&&0===p||b===z)&&xa===C&&(xa=I),xa)}function n(a){if(!a||!a.state)return F;var b=a.state;return b.window&&(b.window=null),a.state=null,C}function o(a,b){var c;/* check state */
/* check state */
/* save header structure */
return a&&a.state?(c=a.state,0===(2&c.wrap)?F:(c.head=b,b.done=!1,C)):F}var p,q,r=a("../utils/common"),s=a("./adler32"),t=a("./crc32"),u=a("./inffast"),v=a("./inftrees"),w=0,x=1,y=2,z=4,A=5,B=6,C=0,D=1,E=2,F=-2,G=-3,H=-4,I=-5,J=8,K=1,L=2,M=3,N=4,O=5,P=6,Q=7,R=8,S=9,T=10,U=11,V=12,W=13,X=14,Y=15,Z=16,$=17,_=18,aa=19,ba=20,ca=21,da=22,ea=23,fa=24,ga=25,ha=26,ia=27,ja=28,ka=29,la=30,ma=31,na=32,oa=852,pa=592,qa=15,ra=qa,sa=!0;c.inflateReset=g,c.inflateReset2=h,c.inflateResetKeep=f,c.inflateInit=j,c.inflateInit2=i,c.inflate=m,c.inflateEnd=n,c.inflateGetHeader=o,c.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(a,b,c){"use strict";var d=a("../utils/common"),e=15,f=852,g=592,h=0,i=1,j=2,k=[/* Length codes 257..285 base */
3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],l=[/* Length codes 257..285 extra */
16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],m=[/* Distance codes 0..29 base */
1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],n=[/* Distance codes 0..29 extra */
16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];b.exports=function(a,b,c,o,p,q,r,s){var t,u,v,w,x,y,z,A,B,C=s.bits,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=null,O=0,P=new d.Buf16(e+1),Q=new d.Buf16(e+1),R=null,S=0;/*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */
/* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
for(D=0;e>=D;D++)P[D]=0;for(E=0;o>E;E++)P[b[c+E]]++;for(H=C,G=e;G>=1&&0===P[G];G--);if(H>G&&(H=G),0===G)/* no symbols to code at all */
//table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
//table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
//table.val[opts.table_index++] = 0;   //here.val = (var short)0;
//table.op[opts.table_index] = 64;
//table.bits[opts.table_index] = 1;
//table.val[opts.table_index++] = 0;
return p[q++]=20971520,p[q++]=20971520,s.bits=1,0;for(F=1;G>F&&0===P[F];F++);for(F>H&&(H=F),K=1,D=1;e>=D;D++)if(K<<=1,K-=P[D],0>K)return-1;if(K>0&&(a===h||1!==G))return-1;for(/* generate offsets into symbol table for each length for sorting */
Q[1]=0,D=1;e>D;D++)Q[D+1]=Q[D]+P[D];/* sort symbols by length, by symbol order within each length */
for(E=0;o>E;E++)0!==b[c+E]&&(r[Q[b[c+E]]++]=E);/* mask for comparing low */
/* check available table space */
if(/*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */
/* set up for code type */
// poor man optimization - use if-else instead of switch,
// to avoid deopts in old v8
a===h?(N=R=r,y=19):a===i?(N=k,O-=257,R=l,S-=257,y=256):(N=m,R=n,y=-1),M=0,E=0,D=F,x=q,I=H,J=0,v=-1,L=1<<H,w=L-1,a===i&&L>f||a===j&&L>g)return 1;/* process all codes and make table entries */
for(var T=0;;){T++,/* create table entry */
z=D-J,r[E]<y?(A=0,B=r[E]):r[E]>y?(A=R[S+r[E]],B=N[O+r[E]]):(A=96,B=0),/* replicate for those indices with low len bits equal to huff */
t=1<<D-J,u=1<<I,F=u;/* save offset to next table */
do u-=t,p[x+(M>>J)+u]=z<<24|A<<16|B|0;while(0!==u);for(/* backwards increment the len-bit code huff */
t=1<<D-1;M&t;)t>>=1;if(0!==t?(M&=t-1,M+=t):M=0,/* go to next symbol, update count, len */
E++,0===--P[D]){if(D===G)break;D=b[c+r[E]]}/* create new sub-table if needed */
if(D>H&&(M&w)!==v){for(/* if first time, transition to sub-tables */
0===J&&(J=H),/* increment past last table */
x+=F,/* here min is 1 << curr */
/* determine length of next table */
I=D-J,K=1<<I;G>I+J&&(K-=P[I+J],!(0>=K));)I++,K<<=1;if(L+=1<<I,a===i&&L>f||a===j&&L>g)return 1;/* point entry in root table to sub-table */
v=M&w,/*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
p[v]=H<<24|I<<16|x-q|0}}/* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
//table.op[next + huff] = 64;            /* invalid code marker */
//table.bits[next + huff] = len - drop;
//table.val[next + huff] = 0;
/* set return parameters */
//opts.table_index += used;
return 0!==M&&(p[x+M]=D-J<<24|64<<16|0),s.bits=H,0}},{"../utils/common":41}],51:[function(a,b,c){"use strict";b.exports={2:"need dictionary",/* Z_NEED_DICT       2  */
1:"stream end",/* Z_STREAM_END      1  */
0:"",/* Z_OK              0  */
"-1":"file error",/* Z_ERRNO         (-1) */
"-2":"stream error",/* Z_STREAM_ERROR  (-2) */
"-3":"data error",/* Z_DATA_ERROR    (-3) */
"-4":"insufficient memory",/* Z_MEM_ERROR     (-4) */
"-5":"buffer error",/* Z_BUF_ERROR     (-5) */
"-6":"incompatible version"}},{}],52:[function(a,b,c){"use strict";/*============================================================================*/
function d(a){for(var b=a.length;--b>=0;)a[b]=0}function e(a){return 256>a?ga[a]:ga[256+(a>>>7)]}/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function f(a,b){
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
a.pending_buf[a.pending++]=255&b,a.pending_buf[a.pending++]=b>>>8&255}/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function g(a,b,c){a.bi_valid>V-c?(a.bi_buf|=b<<a.bi_valid&65535,f(a,a.bi_buf),a.bi_buf=b>>V-a.bi_valid,a.bi_valid+=c-V):(a.bi_buf|=b<<a.bi_valid&65535,a.bi_valid+=c)}function h(a,b,c){g(a,c[2*b],c[2*b+1])}/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function i(a,b){var c=0;do c|=1&a,a>>>=1,c<<=1;while(--b>0);return c>>>1}/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function j(a){16===a.bi_valid?(f(a,a.bi_buf),a.bi_buf=0,a.bi_valid=0):a.bi_valid>=8&&(a.pending_buf[a.pending++]=255&a.bi_buf,a.bi_buf>>=8,a.bi_valid-=8)}/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function k(a,b){var c,d,e,f,g,h,i=b.dyn_tree,j=b.max_code,k=b.stat_desc.static_tree,l=b.stat_desc.has_stree,m=b.stat_desc.extra_bits,n=b.stat_desc.extra_base,o=b.stat_desc.max_length,p=0;/* number of elements with bit length too large */
for(f=0;U>=f;f++)a.bl_count[f]=0;/* root of the heap */
for(/* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
i[2*a.heap[a.heap_max]+1]=0,c=a.heap_max+1;T>c;c++)d=a.heap[c],f=i[2*i[2*d+1]+1]+1,f>o&&(f=o,p++),i[2*d+1]=f,d>j||(a.bl_count[f]++,g=0,d>=n&&(g=m[d-n]),h=i[2*d],a.opt_len+=h*(f+g),l&&(a.static_len+=h*(k[2*d+1]+g)));if(0!==p){
// Trace((stderr,"\nbit length overflow\n"));
/* This happens for example on obj2 and pic of the Calgary corpus */
/* Find the first bit length which could increase: */
do{for(f=o-1;0===a.bl_count[f];)f--;a.bl_count[f]--,/* move one leaf down the tree */
a.bl_count[f+1]+=2,/* move one overflow item as its brother */
a.bl_count[o]--,/* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
p-=2}while(p>0);/* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
for(f=o;0!==f;f--)for(d=a.bl_count[f];0!==d;)e=a.heap[--c],e>j||(i[2*e+1]!==f&&(a.opt_len+=(f-i[2*e+1])*i[2*e],i[2*e+1]=f),d--)}}/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function l(a,b,c){var d,e,f=new Array(U+1),g=0;/* code index */
/* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
for(d=1;U>=d;d++)f[d]=g=g+c[d-1]<<1;/* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
//Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
//        "inconsistent bit counts");
//Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
for(e=0;b>=e;e++){var h=a[2*e+1];0!==h&&(/* Now reverse the bits */
a[2*e]=i(f[h]++,h))}}/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function m(){var a,b,c,d,e,f=new Array(U+1);for(c=0,d=0;O-1>d;d++)for(ia[d]=c,a=0;a<1<<_[d];a++)ha[c++]=d;for(
//Assert (length == 256, "tr_static_init: length != 256");
/* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
ha[c-1]=d,e=0,d=0;16>d;d++)for(ja[d]=e,a=0;a<1<<aa[d];a++)ga[e++]=d;/* from now on, all distances are divided by 128 */
for(
//Assert (dist == 256, "tr_static_init: dist != 256");
e>>=7;R>d;d++)for(ja[d]=e<<7,a=0;a<1<<aa[d]-7;a++)ga[256+e++]=d;
//Assert (dist == 256, "tr_static_init: 256+dist != 512");
/* Construct the codes of the static literal tree */
for(b=0;U>=b;b++)f[b]=0;for(a=0;143>=a;)ea[2*a+1]=8,a++,f[8]++;for(;255>=a;)ea[2*a+1]=9,a++,f[9]++;for(;279>=a;)ea[2*a+1]=7,a++,f[7]++;for(;287>=a;)ea[2*a+1]=8,a++,f[8]++;/* The static distance tree is trivial: */
for(/* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
l(ea,Q+1,f),a=0;R>a;a++)fa[2*a+1]=5,fa[2*a]=i(a,5);ka=new na(ea,_,P+1,Q,U),la=new na(fa,aa,0,R,U),ma=new na(new Array(0),ba,0,S,W)}/* ===========================================================================
 * Initialize a new block.
 */
function n(a){var b;/* iterates over tree elements */
/* Initialize the trees. */
for(b=0;Q>b;b++)a.dyn_ltree[2*b]=0;for(b=0;R>b;b++)a.dyn_dtree[2*b]=0;for(b=0;S>b;b++)a.bl_tree[2*b]=0;a.dyn_ltree[2*X]=1,a.opt_len=a.static_len=0,a.last_lit=a.matches=0}/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function o(a){a.bi_valid>8?f(a,a.bi_buf):a.bi_valid>0&&(
//put_byte(s, (Byte)s->bi_buf);
a.pending_buf[a.pending++]=a.bi_buf),a.bi_buf=0,a.bi_valid=0}/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function p(a,b,c,d){o(a),/* align on byte boundary */
d&&(f(a,c),f(a,~c)),
//  while (len--) {
//    put_byte(s, *buf++);
//  }
E.arraySet(a.pending_buf,a.window,b,c,a.pending),a.pending+=c}/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function q(a,b,c,d){var e=2*b,f=2*c;return a[e]<a[f]||a[e]===a[f]&&d[b]<=d[c]}/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function r(a,b,c){/* left son of k */
for(var d=a.heap[c],e=c<<1;e<=a.heap_len&&(e<a.heap_len&&q(b,a.heap[e+1],a.heap[e],a.depth)&&e++,!q(b,d,a.heap[e],a.depth));)/* Exchange v with the smallest son */
a.heap[c]=a.heap[e],c=e,e<<=1;a.heap[c]=d}
// inlined manually
// var SMALLEST = 1;
/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function s(a,b,c){var d,f,i,j,k=0;/* number of extra bits to send */
if(0!==a.last_lit)do d=a.pending_buf[a.d_buf+2*k]<<8|a.pending_buf[a.d_buf+2*k+1],f=a.pending_buf[a.l_buf+k],k++,0===d?h(a,f,b):(i=ha[f],h(a,i+P+1,b),j=_[i],0!==j&&(f-=ia[i],g(a,f,j)),d--,i=e(d),h(a,i,c),j=aa[i],0!==j&&(d-=ja[i],g(a,d,j)));while(k<a.last_lit);h(a,X,b)}/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function t(a,b){var c,d,e,f=b.dyn_tree,g=b.stat_desc.static_tree,h=b.stat_desc.has_stree,i=b.stat_desc.elems,j=-1;for(/* new node being created */
/* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
a.heap_len=0,a.heap_max=T,c=0;i>c;c++)0!==f[2*c]?(a.heap[++a.heap_len]=j=c,a.depth[c]=0):f[2*c+1]=0;/* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
for(;a.heap_len<2;)e=a.heap[++a.heap_len]=2>j?++j:0,f[2*e]=1,a.depth[e]=0,a.opt_len--,h&&(a.static_len-=g[2*e+1]);/* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
for(b.max_code=j,c=a.heap_len>>1;c>=1;c--)r(a,f,c);/* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
e=i;/* next internal node of the tree */
do c=a.heap[1],a.heap[1]=a.heap[a.heap_len--],r(a,f,1),d=a.heap[1],a.heap[--a.heap_max]=c,a.heap[--a.heap_max]=d,f[2*e]=f[2*c]+f[2*d],a.depth[e]=(a.depth[c]>=a.depth[d]?a.depth[c]:a.depth[d])+1,f[2*c+1]=f[2*d+1]=e,a.heap[1]=e++,r(a,f,1);while(a.heap_len>=2);a.heap[--a.heap_max]=a.heap[1],/* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
k(a,b),/* The field len is now set, we can generate the bit codes */
l(f,j,a.bl_count)}/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function u(a,b,c){var d,e,f=-1,g=b[1],h=0,i=7,j=4;/* guard */
for(/* min repeat count */
0===g&&(i=138,j=3),b[2*(c+1)+1]=65535,d=0;c>=d;d++)e=g,g=b[2*(d+1)+1],++h<i&&e===g||(j>h?a.bl_tree[2*e]+=h:0!==e?(e!==f&&a.bl_tree[2*e]++,a.bl_tree[2*Y]++):10>=h?a.bl_tree[2*Z]++:a.bl_tree[2*$]++,h=0,f=e,0===g?(i=138,j=3):e===g?(i=6,j=3):(i=7,j=4))}/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function v(a,b,c){var d,e,f=-1,i=b[1],j=0,k=7,l=4;for(/* min repeat count */
/* tree[max_code+1].Len = -1; */
/* guard already set */
0===i&&(k=138,l=3),d=0;c>=d;d++)if(e=i,i=b[2*(d+1)+1],!(++j<k&&e===i)){if(l>j){do h(a,e,a.bl_tree);while(0!==--j)}else 0!==e?(e!==f&&(h(a,e,a.bl_tree),j--),
//Assert(count >= 3 && count <= 6, " 3_6?");
h(a,Y,a.bl_tree),g(a,j-3,2)):10>=j?(h(a,Z,a.bl_tree),g(a,j-3,3)):(h(a,$,a.bl_tree),g(a,j-11,7));j=0,f=e,0===i?(k=138,l=3):e===i?(k=6,l=3):(k=7,l=4)}}/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function w(a){var b;/* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */
/* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
for(/* index of last bit length code of non zero freq */
/* Determine the bit length frequencies for literal and distance trees */
u(a,a.dyn_ltree,a.l_desc.max_code),u(a,a.dyn_dtree,a.d_desc.max_code),/* Build the bit length tree: */
t(a,a.bl_desc),b=S-1;b>=3&&0===a.bl_tree[2*ca[b]+1];b--);
//Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
//        s->opt_len, s->static_len));
/* Update opt_len to include the bit length tree and counts */
return a.opt_len+=3*(b+1)+5+5+4,b}/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function x(a,b,c,d){var e;/* not -3 as stated in appnote.txt */
for(/* index in bl_order */
//Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
//Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
//        "too many codes");
//Tracev((stderr, "\nbl counts: "));
g(a,b-257,5),/* not +255 as stated in appnote.txt */
g(a,c-1,5),g(a,d-4,4),e=0;d>e;e++)
//Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
g(a,a.bl_tree[2*ca[e]+1],3);
//Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
v(a,a.dyn_ltree,b-1),/* literal tree */
//Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
v(a,a.dyn_dtree,c-1)}/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function y(a){/* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
var b,c=4093624447;/* Check for non-textual ("black-listed") bytes. */
for(b=0;31>=b;b++,c>>>=1)if(1&c&&0!==a.dyn_ltree[2*b])return G;/* Check for textual ("white-listed") bytes. */
if(0!==a.dyn_ltree[18]||0!==a.dyn_ltree[20]||0!==a.dyn_ltree[26])return H;for(b=32;P>b;b++)if(0!==a.dyn_ltree[2*b])return H;/* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
return G}/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function z(a){pa||(m(),pa=!0),a.l_desc=new oa(a.dyn_ltree,ka),a.d_desc=new oa(a.dyn_dtree,la),a.bl_desc=new oa(a.bl_tree,ma),a.bi_buf=0,a.bi_valid=0,/* Initialize the first block of the first file: */
n(a)}/* ===========================================================================
 * Send a stored block
 */
function A(a,b,c,d){g(a,(J<<1)+(d?1:0),3),/* send block type */
p(a,b,c,!0)}/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function B(a){g(a,K<<1,3),h(a,X,ea),j(a)}/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function C(a,b,c,d){var e,f,h=0;/* index of last bit length code of non zero freq */
/* Build the Huffman trees unless a stored block is forced */
a.level>0?(/* Check if the file is binary or text */
a.strm.data_type===I&&(a.strm.data_type=y(a)),/* Construct the literal and distance trees */
t(a,a.l_desc),
// Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
//        s->static_len));
t(a,a.d_desc),h=w(a),e=a.opt_len+3+7>>>3,f=a.static_len+3+7>>>3,e>=f&&(e=f)):
// Assert(buf != (char*)0, "lost buf");
e=f=c+5,e>=c+4&&-1!==b?/* 4: two words for the lengths */
/* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
A(a,b,c,d):a.strategy===F||f===e?(g(a,(K<<1)+(d?1:0),3),s(a,ea,fa)):(g(a,(L<<1)+(d?1:0),3),x(a,a.l_desc.max_code+1,a.d_desc.max_code+1,h+1),s(a,a.dyn_ltree,a.dyn_dtree)),
// Assert (s->compressed_len == s->bits_sent, "bad compressed size");
/* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
n(a),d&&o(a)}/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function D(a,b,c){
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif
//var out_length, in_length, dcode;
/* lc is the unmatched char */
/* Here, lc is the match length - MIN_MATCH */
/* dist = match distance - 1 */
//Assert((ush)dist < (ush)MAX_DIST(s) &&
//       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
//       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
return a.pending_buf[a.d_buf+2*a.last_lit]=b>>>8&255,a.pending_buf[a.d_buf+2*a.last_lit+1]=255&b,a.pending_buf[a.l_buf+a.last_lit]=255&c,a.last_lit++,0===b?a.dyn_ltree[2*c]++:(a.matches++,b--,a.dyn_ltree[2*(ha[c]+P+1)]++,a.dyn_dtree[2*e(b)]++),a.last_lit===a.lit_bufsize-1}var E=a("../utils/common"),F=4,G=0,H=1,I=2,J=0,K=1,L=2,M=3,N=258,O=29,P=256,Q=P+1+O,R=30,S=19,T=2*Q+1,U=15,V=16,W=7,X=256,Y=16,Z=17,$=18,_=/* extra bits for each length code */
[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],aa=/* extra bits for each distance code */
[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],ba=/* extra bits for each bit length code */
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],ca=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],da=512,ea=new Array(2*(Q+2));d(ea);/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */
var fa=new Array(2*R);d(fa);/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */
var ga=new Array(da);d(ga);/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */
var ha=new Array(N-M+1);d(ha);/* length code for each normalized match length (0 == MIN_MATCH) */
var ia=new Array(O);d(ia);/* First normalized length for each code (0 = MIN_MATCH) */
var ja=new Array(R);d(ja);/* First normalized distance for each code (0 = distance of 1) */
var ka,la,ma,na=function(a,b,c,d,e){this.static_tree=a,/* static tree or NULL */
this.extra_bits=b,/* extra bits for each code or NULL */
this.extra_base=c,/* base index for extra_bits */
this.elems=d,/* max number of elements in the tree */
this.max_length=e,/* max bit length for the codes */
// show if `static_tree` has data or dummy - needed for monomorphic objects
this.has_stree=a&&a.length},oa=function(a,b){this.dyn_tree=a,/* the dynamic tree */
this.max_code=0,/* largest code with non zero frequency */
this.stat_desc=b},pa=!1;c._tr_init=z,c._tr_stored_block=A,c._tr_flush_block=C,c._tr_tally=D,c._tr_align=B},{"../utils/common":41}],53:[function(a,b,c){"use strict";function d(){/* next input byte */
this.input=null,// JS specific, because we have no pointers
this.next_in=0,/* number of bytes available at input */
this.avail_in=0,/* total number of input bytes read so far */
this.total_in=0,/* next output byte should be put there */
this.output=null,// JS specific, because we have no pointers
this.next_out=0,/* remaining free space at output */
this.avail_out=0,/* total number of bytes output so far */
this.total_out=0,/* last error message, NULL if no error */
this.msg="",/* not visible by applications */
this.state=null,/* best guess about the data type: binary or text */
this.data_type=2,/* adler32 value of the uncompressed data */
this.adler=0}b.exports=d},{}]},{},[11])(11)});